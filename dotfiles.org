#+title: dotfiles
#+STARTUP: content

* xmodmap
:PROPERTIES:
:header-args: :tangle ~/.Xmodmap
:END:

** put control at the right position

#+begin_src fundamental
keycode  37 = Control_L NoSymbol Control_L
#+end_src

** use right control as hyper

#+begin_src fundamental
keycode 105 = Hyper_R
#+end_src

** semicolon as mode_switch                                       :ARCHIVE:
:PROPERTIES:
:header-args: :tangle nil
:END:

 The idea is from https://oremacs.com/2015/02/14/semi-xmodmap/

#+begin_src fundamental
keycode  47 = Mode_switch Mode_switch Mode_switch
#+end_src

*** for {1-9} âˆª {0}, mode_switch acts as shift

#+begin_src fundamental
keycode  49 = Escape Escape
keycode  10 = 1 exclam exclam U2081
keycode  11 = 2 at at U2082
keycode  12 = 3 numbersign numbersign U2083
keycode  13 = 4 dollar dollar U2084
keycode  14 = 5 percent percent U2085
keycode  15 = 6 asciicircum asciicircum U2086
keycode  16 = 7 ampersand ampersand U2087
keycode  17 = 8 asterisk asterisk U2605
keycode  18 = 9 parenleft parenleft U2089
keycode  19 = 0 parenright parenright U2080
#+end_src

*** for a-z

#+begin_src fundamental
keycode  24 = q Q U03B8 U0398
keycode  25 = w W backslash bar
keycode  26 = e E equal U0395
keycode  27 = r R U03C1
keycode  28 = t T asciitilde U03A4
keycode  29 = y Y grave U03A5
keycode  30 = u U U03C8 U03A8
keycode  31 = i I Tab ISO_Left_Tab
keycode  32 = o O asciicircum U039F
keycode  33 = p P U03C0 U03A0
keycode  38 = a A minus U03b1
keycode  39 = s S underscore U039E
keycode  40 = d D colon U0394
keycode  41 = f F BackSpace U03A6
keycode  42 = g G greater U0393
keycode  43 = h H U03B7 U0397
keycode  44 = j J semicolon U03AA
keycode  45 = k K U03BA U039A
keycode  46 = l L less U039B
keycode  52 = z Z plus U0396
keycode  53 = x X U03C7 U03A7
keycode  54 = c C U03C3 U03A3
keycode  55 = v V Return U03DE
keycode  56 = b B grave U03B2
keycode  57 = n N U03BD U039D
keycode  58 = m M U03BC U039C
#+end_src
** hyper key, reset modifiers and locks

#+begin_src fundamental
clear control
clear lock
clear mod1
clear mod3
keycode 66 = Control_L
keycode 37 = Caps_Lock
add control = Control_L
add lock = Caps_Lock
add mod1 = Alt_L Alt_R
add mod3 = Hyper_R
#+end_src

* alacritty
:PROPERTIES:
:header-args: :tangle ~/.config/alacritty/alacritty.yml
:END:

** fonts

#+begin_src yaml
font:
  # The size to use.
  size: 18
  # The normal (roman) font face to use.
  normal:
    family: Victor Mono
    # Style can be specified to pick a specific face.
    style: regular

  # The bold font face
  bold:
    family: Victor Mono
    # Style can be specified to pick a specific face.
    style: bold

  # The italic font face
  italic:
    family: Victor Mono
    # Style can be specified to pick a specific face.
    style: italic
#+end_src

** window geometry

#+begin_src yaml

window:
  dimensions:
    columns: 100
    lines: 20

#+end_src

** colors and opacity

*** nord

#+begin_src yaml
background_opacity: 0.9

colors:
  primary:
    background: '#2e3441'
    foreground: '#eceff1'
    dim_foreground: '#a5abb6'
  cursor:
    text: '#2e3440'
    cursor: '#d8dee9'
  vi_mode_cursor:
    text: '#2e3440'
    cursor: '#d8dee9'
  selection:
    text: CellForeground
    background: '#4c566a'
  search:
    matches:
      foreground: CellBackground
      background: '#88c0d0'
    bar:
      background: '#434c5e'
      foreground: '#d8dee9'
  normal:
    black: '#3b4252'
    red: '#bf616a'
    green: '#a3be8c'
    yellow: '#ebcb8b'
    blue: '#81a1c1'
    magenta: '#b48ead'
    cyan: '#88c0d0'
    white: '#e5e9f0'
  bright:
    black: '#4c566a'
    red: '#bf616a'
    green: '#a3be8c'
    yellow: '#ebcb8b'
    blue: '#81a1c1'
    magenta: '#b48ead'
    cyan: '#8fbcbb'
    white: '#eceff4'
  dim:
    black: '#373e4d'
    red: '#94545d'
    green: '#809575'
    yellow: '#b29e75'
    blue: '#68809a'
    magenta: '#8c738c'
    cyan: '#6d96a5'
    white: '#aeb3bb'
#+end_src

*** dark mode                                                     :ARCHIVE:
#+begin_src yaml
background_opacity: 0.8

colors: 
  primary:
    # dark
    background: '#000000'
    foreground: '#eeeedd'
  normal:
    black: '#000000'
    red: '#ff8059'
    green: '#44bc44'
    yellow: '#eecc00'
    blue: '#2fafff'
    magenta: '#feacd0'
    cyan: '#00d3d0'
    white: '#eeeedd'    

#+end_src
* mail
** offlineimap
:PROPERTIES:
:header-args: :tangle ~/.config/offlineimap/config
:END:

*** function for password-store query
:PROPERTIES:
:header-args: :tangle ~/.config/offlineimap/offlineimap.py
:END:

#+begin_src python :tangle-mode (identity #o755)
#!/usr/bin/env python2
import subprocess

def get_pass(account):
    return subprocess.Popen("pass" + " " + account + "/email",
                           shell=True,
                           stdout=subprocess.PIPE,
                           universal_newlines=True).communicate()[0].split("\n")[0]

#+end_src

*** general settings

#+begin_src conf
[general]
accounts = SJTU, UMich
pythonfile = ~/.config/offlineimap/offlineimap.py
maxsyncaccounts = 2

# metadata dir
metadata = ~/.config/offlineimap/metadata
#+end_src

*** SJTU

#+begin_src conf

[Account SJTU]
localrepository = LocalSJTU
remoterepository = RemoteSJTU
# sync mail periodically in minutes
autorefresh = 5
quick = 10
postsynchook = mu index --maildir ~/Maildir

[Repository LocalSJTU]
type = Maildir
localfolders = ~/Maildir/SJTU

[Repository RemoteSJTU]
type = IMAP
maxconnections = 2
remotehost = imap.sjtu.edu.cn
remoteuser = ljg16654
remotepasseval = get_pass("SJTU")
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
#+end_src

*** UMich

#+begin_src conf
[Account UMich]
localrepository = LocalUMich
remoterepository = RemoteUMich
proxy = HTTP:127.0.0.1:7890
# sync mail periodically in minutes
autorefresh = 5
quick = 10
# postsynchook = mu index --maildir ~/Maildir

[Repository LocalUMich]
type = Maildir
localfolders = ~/Maildir/UMich

[Repository RemoteUMich]
type = Gmail
maxconnections = 2
# remotehost = imap.gmail.com
ssl = yes
remoteuser = hcimu@umich.edu
remotepasseval = get_pass("umich")
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
# sslcacertfile = OS-DEFAULT
#+end_src

* compton
:PROPERTIES:
:header-args: :tangle ~/.config/compton/compton.conf
:END:

** dim unfocused window

#+begin_src conf :tangle nil
inactive-dim = 0.1;
#+end_src

** window transparency

#+begin_src conf
opacity-rule = [ "80:name = 'sketch'" ];
#+end_src

** TODO blur

#+begin_src conf :tangle nil
blur-method = "dual_kawase";
blur-strength = 6;
blur-background = true;
blur-kern = "7x7box";
#+end_src

* qutebrowser
:PROPERTIES:
:header-args: :tangle ~/.config/qutebrowser/config.py
:END:

For documentation, see
+ qute://help/configuring.html
+ qute://help/settings.html

** load autoconfig

#+begin_src python
config.load_autoconfig()
#+end_src

** disable continuous scrolling

#+begin_src python
c.scrolling.smooth = False
#+end_src

** user agency, js and image rendering

#+begin_src python 
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://accounts.google.com/*')

config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://docs.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

#+end_src

** proxy

#+begin_src python
c.content.proxy = 'http://127.0.0.1:7890'
#+end_src

** zoom ratios

#+begin_src python
c.zoom.default = '225%'
c.zoom.levels = ["50%", "100%", "150%", "200%", "225%", "250%", "300%", "350%"]
#+end_src

** dealing with sessions and windows

#+begin_src python
c.tabs.tabs_are_windows = False
c.tabs.last_close = "ignore"

c.auto_save.session = True
c.scrolling.smooth = True
c.session.lazy_restore = True
c.content.autoplay = False
#+end_src

** color scheme

#+begin_src python
nord = {
    # Polar Night
    'nord0': '#2e3440',
    'nord1': '#3b4252',
    'nord2': '#434c5e',
    'nord3': '#4c566a',
    # Snow Storm
    'nord4': '#d8dee9',
    'nord5': '#e5e9f0',
    'nord6': '#eceff4',
    # Frost
    'nord7': '#8fbcbb',
    'nord8': '#88c0d0',
    'nord9': '#81a1c1',
    'nord10': '#5e81ac',
    # Aurora
    'nord11': '#bf616a',
    'nord12': '#d08770',
    'nord13': '#ebcb8b',
    'nord14': '#a3be8c',
    'nord15': '#b48ead',
}

## Background color of the completion widget category headers.
## Type: QssColor
c.colors.completion.category.bg = nord['nord0']

## Bottom border color of the completion widget category headers.
## Type: QssColor
c.colors.completion.category.border.bottom = nord['nord0']

## Top border color of the completion widget category headers.
## Type: QssColor
c.colors.completion.category.border.top = nord['nord0']

## Foreground color of completion widget category headers.
## Type: QtColor
c.colors.completion.category.fg = nord['nord5']

## Background color of the completion widget for even rows.
## Type: QssColor
c.colors.completion.even.bg = nord['nord1']

## Background color of the completion widget for odd rows.
## Type: QssColor
c.colors.completion.odd.bg = nord['nord1']

## Text color of the completion widget.
## Type: QtColor
c.colors.completion.fg = nord['nord4']

## Background color of the selected completion item.
## Type: QssColor
c.colors.completion.item.selected.bg = nord['nord3']

## Bottom border color of the selected completion item.
## Type: QssColor
c.colors.completion.item.selected.border.bottom = nord['nord3']

## Top border color of the completion widget category headers.
## Type: QssColor
c.colors.completion.item.selected.border.top = nord['nord3']

## Foreground color of the selected completion item.
## Type: QtColor
c.colors.completion.item.selected.fg = nord['nord6']

## Foreground color of the matched text in the completion.
## Type: QssColor
c.colors.completion.match.fg = nord['nord13']

## Color of the scrollbar in completion view
## Type: QssColor
c.colors.completion.scrollbar.bg = nord['nord1']

## Color of the scrollbar handle in completion view.
## Type: QssColor
c.colors.completion.scrollbar.fg = nord['nord5']

## Background color for the download bar.
## Type: QssColor
c.colors.downloads.bar.bg = nord['nord0']

## Background color for downloads with errors.
## Type: QtColor
c.colors.downloads.error.bg = nord['nord11']

## Foreground color for downloads with errors.
## Type: QtColor
c.colors.downloads.error.fg = nord['nord5']

## Color gradient stop for download backgrounds.
## Type: QtColor
c.colors.downloads.stop.bg = nord['nord15']

## Color gradient interpolation system for download backgrounds.
## Type: ColorSystem
## Valid values:
##   - rgb: Interpolate in the RGB color system.
##   - hsv: Interpolate in the HSV color system.
##   - hsl: Interpolate in the HSL color system.
##   - none: Don't show a gradient.
c.colors.downloads.system.bg = 'none'

## Background color for hints. Note that you can use a `rgba(...)` value
## for transparency.
## Type: QssColor
c.colors.hints.bg = nord['nord13']

## Font color for hints.
## Type: QssColor
c.colors.hints.fg = nord['nord0']

## Font color for the matched part of hints.
## Type: QssColor
c.colors.hints.match.fg = nord['nord10']

## Background color of the keyhint widget.
## Type: QssColor
c.colors.keyhint.bg = nord['nord1']

## Text color for the keyhint widget.
## Type: QssColor
c.colors.keyhint.fg = nord['nord5']

## Highlight color for keys to complete the current keychain.
## Type: QssColor
c.colors.keyhint.suffix.fg = nord['nord13']

## Background color of an error message.
## Type: QssColor
c.colors.messages.error.bg = nord['nord11']

## Border color of an error message.
## Type: QssColor
c.colors.messages.error.border = nord['nord11']

## Foreground color of an error message.
## Type: QssColor
c.colors.messages.error.fg = nord['nord5']

## Background color of an info message.
## Type: QssColor
c.colors.messages.info.bg = nord['nord8']

## Border color of an info message.
## Type: QssColor
c.colors.messages.info.border = nord['nord8']

## Foreground color an info message.
## Type: QssColor
c.colors.messages.info.fg = nord['nord5']

## Background color of a warning message.
## Type: QssColor
c.colors.messages.warning.bg = nord['nord12']

## Border color of a warning message.
## Type: QssColor
c.colors.messages.warning.border = nord['nord12']

## Foreground color a warning message.
## Type: QssColor
c.colors.messages.warning.fg = nord['nord5']

## Background color for prompts.
## Type: QssColor
c.colors.prompts.bg = nord['nord2']

# ## Border used around UI elements in prompts.
# ## Type: String
c.colors.prompts.border = '1px solid ' + nord['nord0']

## Foreground color for prompts.
## Type: QssColor
c.colors.prompts.fg = nord['nord5']

## Background color for the selected item in filename prompts.
## Type: QssColor
c.colors.prompts.selected.bg = nord['nord3']

## Background color of the statusbar in caret mode.
## Type: QssColor
c.colors.statusbar.caret.bg = nord['nord15']

## Foreground color of the statusbar in caret mode.
## Type: QssColor
c.colors.statusbar.caret.fg = nord['nord5']

## Background color of the statusbar in caret mode with a selection.
## Type: QssColor
c.colors.statusbar.caret.selection.bg = nord['nord15']

## Foreground color of the statusbar in caret mode with a selection.
## Type: QssColor
c.colors.statusbar.caret.selection.fg = nord['nord5']

## Background color of the statusbar in command mode.
## Type: QssColor
c.colors.statusbar.command.bg = nord['nord2']

## Foreground color of the statusbar in command mode.
## Type: QssColor
c.colors.statusbar.command.fg = nord['nord5']

## Background color of the statusbar in private browsing + command mode.
## Type: QssColor
c.colors.statusbar.command.private.bg = nord['nord2']

## Foreground color of the statusbar in private browsing + command mode.
## Type: QssColor
c.colors.statusbar.command.private.fg = nord['nord5']

## Background color of the statusbar in insert mode.
## Type: QssColor
c.colors.statusbar.insert.bg = nord['nord14']

## Foreground color of the statusbar in insert mode.
## Type: QssColor
c.colors.statusbar.insert.fg = nord['nord1']

## Background color of the statusbar.
## Type: QssColor
c.colors.statusbar.normal.bg = nord['nord0']

## Foreground color of the statusbar.
## Type: QssColor
c.colors.statusbar.normal.fg = nord['nord5']

## Background color of the statusbar in passthrough mode.
## Type: QssColor
c.colors.statusbar.passthrough.bg = nord['nord10']

## Foreground color of the statusbar in passthrough mode.
## Type: QssColor
c.colors.statusbar.passthrough.fg = nord['nord5']

## Background color of the statusbar in private browsing mode.
## Type: QssColor
c.colors.statusbar.private.bg = nord['nord3']

## Foreground color of the statusbar in private browsing mode.
## Type: QssColor
c.colors.statusbar.private.fg = nord['nord5']

## Background color of the progress bar.
## Type: QssColor
c.colors.statusbar.progress.bg = nord['nord5']

## Foreground color of the URL in the statusbar on error.
## Type: QssColor
c.colors.statusbar.url.error.fg = nord['nord11']

## Default foreground color of the URL in the statusbar.
## Type: QssColor
c.colors.statusbar.url.fg = nord['nord5']

## Foreground color of the URL in the statusbar for hovered links.
## Type: QssColor
c.colors.statusbar.url.hover.fg = nord['nord8']

## Foreground color of the URL in the statusbar on successful load
## (http).
## Type: QssColor
c.colors.statusbar.url.success.http.fg = nord['nord5']

## Foreground color of the URL in the statusbar on successful load
## (https).
## Type: QssColor
c.colors.statusbar.url.success.https.fg = nord['nord14']

## Foreground color of the URL in the statusbar when there's a warning.
## Type: QssColor
c.colors.statusbar.url.warn.fg = nord['nord12']

## Background color of the tab bar.
## Type: QtColor
c.colors.tabs.bar.bg = nord['nord3']

## Background color of unselected even tabs.
## Type: QtColor
c.colors.tabs.even.bg = nord['nord3']

## Foreground color of unselected even tabs.
## Type: QtColor
c.colors.tabs.even.fg = nord['nord5']

## Color for the tab indicator on errors.
## Type: QtColor
c.colors.tabs.indicator.error = nord['nord11']

## Color gradient start for the tab indicator.
## Type: QtColor
# c.colors.tabs.indicator.start = nord['violet']

## Color gradient end for the tab indicator.
## Type: QtColor
# c.colors.tabs.indicator.stop = nord['orange']

## Color gradient interpolation system for the tab indicator.
## Type: ColorSystem
## Valid values:
##   - rgb: Interpolate in the RGB color system.
##   - hsv: Interpolate in the HSV color system.
##   - hsl: Interpolate in the HSL color system.
##   - none: Don't show a gradient.
c.colors.tabs.indicator.system = 'none'

## Background color of unselected odd tabs.
## Type: QtColor
c.colors.tabs.odd.bg = nord['nord3']

## Foreground color of unselected odd tabs.
## Type: QtColor
c.colors.tabs.odd.fg = nord['nord5']

# ## Background color of selected even tabs.
# ## Type: QtColor
c.colors.tabs.selected.even.bg = nord['nord0']

# ## Foreground color of selected even tabs.
# ## Type: QtColor
c.colors.tabs.selected.even.fg = nord['nord5']

# ## Background color of selected odd tabs.
# ## Type: QtColor
c.colors.tabs.selected.odd.bg = nord['nord0']

# ## Foreground color of selected odd tabs.
# ## Type: QtColor
c.colors.tabs.selected.odd.fg = nord['nord5']

## Background color for webpages if unset (or empty to use the theme's
## color)
## Type: QtColor
# c.colors.webpage.bg = 'white'

#+end_src

** fonts

#+begin_src python
c.fonts.default_family = "Victor Mono"
c.fonts.default_size = "13pt"
c.fonts.web.family.cursive = "Victor Mono"
c.fonts.web.family.fantasy= "Victor Mono"
c.fonts.web.family.fixed = "Victor Mono"
c.fonts.web.family.sans_serif = "Victor Mono"
c.fonts.web.family.serif = "Victor Mono"
c.fonts.web.family.standard = "Victor Mono"
#+end_src

** keybindings

#+begin_src python
config.bind('wo', 'window-only')
config.bind(',r', 'restart')
config.bind(',d', 'set colors.webpage.darkmode.enabled true')
config.bind(',l', 'set colors.webpage.darkmode.enabled false')
config.bind('tf', 'fullscreen')
#+end_src

** TODO integration with org roam capture

#+begin_src python :tangle nil
import os
# nasty tip 1: must give full path
# nasty tip 2: passing --userscript argument doesn't seem to work
config.bind("<Ctrl-r>", "spawn python /home/nil/.local/share/qutebrowser/userscripts/roam-capture.py \"{url:pretty}\" \"{title}\"")
config.unbind("wo", mode="normal")
config.bind("wo", "window-only", mode="normal")
#+end_src

* stumpwm                                                           :ARCHIVE:
:PROPERTIES:
:header-args: :tangle ~/.stumpwm.d/init.lisp
:END:

** start swank server

#+begin_src lisp
(load "~/.emacs.d/straight/repos/slime/swank-loader.lisp")
(swank-loader:init)
(defcommand swank () ()
    (swank:create-server :port 4005
                       :style swank:*communication-style*
                       :dont-close t)
  (echo-string (current-screen)
	       "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))
(swank)
#+end_src

** raise-or-run

#+begin_src lisp

(defcommand emacs () ()
  "Start emacs unless it is already running, in which case focus it.
Do not jump across groups."
  (run-or-raise "emacs" '(:class "Emacs") nil))
(defcommand qutebrowser () ()
  "Start qutebrowser unless it is already running, in which case focus it.
Do not jump across groups."
  (run-or-raise "qutebrowser" '(:class "qutebrowser") nil))
(defcommand alacritty () ()
  "Start alacritty unless it is already running, in which case focus it.
Do not jump across groups."
  (run-or-raise "alacritty" '(:class "Alacritty") nil))

(define-key *top-map* (kbd "s-q") "qutebrowser")
(define-key *top-map* (kbd "s-e") "emacs")
(define-key *top-map* (kbd "s-a") "alacritty")
#+end_src

* pjassword management and encryption

** gpg agent
:PROPERTIES:
:header-args: :tangle ~/.gnupg/gpg-agent.conf
:END:

*** specify pinentry program

#+begin_src conf
pinentry-program /home/nil/.guix-profile/bin/pinentry-gtk-2
#+end_src

*** pinentry-emacs

https://github.com/ecraven/pinentry-emacs

#+begin_src sh :shebang /usr/bin/env bash :tangle ~/.gnupg pinentry-emacs :tangle-mode (identity #o755)
set -o pipefail
echo OK
while read cmd rest
do
    case $cmd in
        SETDESC)
            DESC=$rest
            if [ ${DESC: -3} != '%0A' ]; then
                DESC="$DESC%0A"
            fi
            echo OK
        ;;
        CONFIRM)
            echo ASSUAN_Not_Confirmed
        ;;
        SETPROMPT)
            PROMPT=$rest
            echo OK
        ;;
        SETOK)
            OK=$rest
            echo OK
        ;;
        SETERROR)
            ERROR=$rest
            echo OK
        ;;
        GETPIN)

            RES=$(emacsclient -e "(pinentry-emacs \"$DESC\" \"$PROMPT\" \"$OK\" \"$ERROR\")" | sed -e 's/^"//' -e 's/"$//')
            if [ $? -ne 0 ]
            then
                RES=$(pinentry-gtk-2)
            fi
            echo D $RES
            echo OK
        ;;
        OPTION)
            echo OK
        ;;
        GETINFO)
            case $rest in
                pid*)
                    echo D $$
                    echo OK
                    ;;
                version)
                    echo D 1.0.0
                    echo OK
                    ;;
                flavor*)
                    echo D curses:curses
                    echo OK
                    ;;
                ttyinfo*)
                    echo "D - - -"
                    echo OK
                    ;;
            esac
        ;;
        BYE)
            echo OK
            exit
        ;;
        ,*)
            echo OK
        ;;
    esac
done
#+end_src

* nyxt                                                              :ARCHIVE:
:PROPERTIES:
:header-args: :tangle nil
:END:

** swank server

#+begin_src lisp
(load "~/.emacs.d/straight/repos/slime/swank-loader.lisp")
(swank-loader:init)
(swank:create-server
 :port 5678
 :style swank:*communication-style*
 :dont-close t)
#+end_src

** proxy

#+begin_src lisp
(define-configuration nyxt/proxy-mode:proxy-mode
  ((nyxt/proxy-mode:proxy (make-instance 'proxy
                                         :url (quri:uri "http://127.0.0.1:7890")
                                         :allowlist '("localhost" "localhost:8080")
                                         :proxied-downloads-p t))))

(define-configuration web-buffer
  ((default-modes (append '(proxy-mode) %slot-default%))))
#+end_src

** zoom ratio

related:
+ https://github.com/atlas-engineer/nyxt/issues/151

** mode-line rendering

See [[https://github.com/atlas-engineer/nyxt/issues/1449][related issue]].

#+begin_src lisp :tangle nil
(define-configuration status-buffer ((height 80)))
(define-configuration window
  ((message-buffer-height 50)))
#+end_src

* math latex template
:PROPERTIES:
:header-args: :tangle ~/org-roam/math/math-setup.org
:END:

#+begin_src org
#+latex_header:\usepackage[margin=2.5cm]{geometry}
#+latex_header:\usepackage{amsthm}
#+latex_header:\newtheorem{theorem}{Theorem}[section]
#+latex_header:\newtheorem{definition}{Definition}
#+latex_header:\newtheorem{corollary}{Corollary}[theorem]
#+latex_header:\newtheorem{lemma}[theorem]{Lemma}
#+end_src

* xmonad
:PROPERTIES:
:header-args: :tangle ~/.xmonad/xmonad.hs
:END:

#+begin_src haskell
import Data.Ratio
import XMonad
import XMonad.StackSet as W
import XMonad.ManageHook
import XMonad.Util.NamedScratchpad
import XMonad.Util.EZConfig(additionalKeysP, removeKeysP)
import XMonad.Util.Scratchpad
import XMonad.Layout.Hidden
import XMonad.Layout.Gaps
import XMonad.Layout.Spacing(smartSpacing)
-- https://hackage.haskell.org/package/xmonad-contrib-0.13/docs/XMonad-Actions-WindowGo.html
import XMonad.Actions.CycleWS
import XMonad.Actions.DynamicWorkspaceOrder as DO
import XMonad.Actions.WindowGo(runOrRaise, runOrRaiseNext)
import XMonad.Actions.PhysicalScreens(onPrevNeighbour, onNextNeighbour)
import XMonad.Actions.WorkspaceNames(renameWorkspace, getCurrentWorkspaceName, getWorkspaceName)
import XMonad.Actions.SwapWorkspaces(swapTo)  
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.EwmhDesktops
import Data.Maybe

main :: IO ()
main = xmonad
       . ewmh
       =<< statusBar "xmobar" myXmobarPP toggleStructsKey
       myConfig
  
  where
    toggleStructsKey :: XConfig Layout -> (KeyMask, KeySym)
    toggleStructsKey XConfig{ modMask = m } = (m, xK_b)


getName tag = maybe "" (" " ++) <$> getWorkspaceName tag
  
-- https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Hooks-DynamicLog.html#t:PP  
myXmobarPP :: PP
myXmobarPP = def
  { ppSep = magenta " â€¢ "
  , ppCurrent = wrap (blue "[") (blue "]")
  -- , ppCurrent = (\str -> wrap (blue "[") (blue "]") (str ++ (myGetName str)))
  -- , ppCurrent = xmobarColor "green" "" . wrap "[" "]" . liftM (fromMaybe "") . getWorkspaceName
  -- , ppCurrent = \tag -> getWorkspaceName tag >>= fromMaybe "" . liftX . xmobarColor "green" "" . wrap "[" "]"
  -- , ppCurrent = getName
  -- , ppCurrent = \tag -> (fromMaybe "" (liftX (getWorkspaceName tag)))
  , ppLayout = (\x -> "") -- do not display the layout
  , ppExtras = [getCurrentWorkspaceName]
  }
  where
    magenta  = xmobarColor "#ff79c6" ""
    blue     = xmobarColor "#bd93f9" ""
    
  --  { ppSep             = magenta " â€¢ "
  --   , ppTitleSanitize   = xmobarStrip
  --   , ppCurrent = wrap (blue "[") (blue "]")
  --   , ppHidden          = white . wrap " " ""
  --   , ppHiddenNoWindows = lowWhite . wrap " " ""
  --   , ppUrgent          = red . wrap (yellow "!") (yellow "!")
  --   , ppOrder           = \[ws, l, _, wins] -> [ws, l, wins]
  --   -- , ppExtras          = [formatFocused formatUnfocused]
  --   }
  -- where
  --   formatFocused   = wrap (white    "[") (white    "]") . magenta . ppWindow
  --   formatUnfocused = wrap (lowWhite "[") (lowWhite "]") . blue    . ppWindow

  --   -- | Windows should have *some* title, which should not not exceed a
  --   -- sane length.
  --   ppWindow :: String -> String
  --   ppWindow = xmobarRaw . (\w -> if null w then "untitled" else w) . shorten 30

  --   blue, lowWhite, magenta, red, white, yellow :: String -> String
  --   magenta  = xmobarColor "#ff79c6" ""
  --   blue     = xmobarColor "#bd93f9" ""
  --   white    = xmobarColor "#f8f8f2" ""
  --   yellow   = xmobarColor "#f1fa8c" ""
  --   red      = xmobarColor "#ff5555" ""
  --   lowWhite = xmobarColor "#bbbbbb" ""

myConfig = def
  { modMask = mod4Mask -- rebind Mod to the super key
  , terminal = "alacritty"
  , layoutHook = myLayout
  , manageHook = namedScratchpadManageHook scratchpads
  }
  `additionalKeysP`
  -- M means the modifier key assigned for XMonad
  -- which violates the Emacs convention
  [ ("M-e",   runOrRaiseNext "emacs"                   (className =? "Emacs"))
  , ("M-C-e", spawn "emacsclient -c")
  , ("M-q",   runOrRaiseNext "qutebrowser"             (className =? "qutebrowser"))
  , ("M-C-j", runOrRaiseNext "GDK_SCALE=2 GTK_THEME=Materia-dark-compact xournalpp"  (className =? "Xournalpp"))
  , ("M-a", namedScratchpadAction scratchpads "default")
  , ("M-s", namedScratchpadAction scratchpads "sketch")
  , ("M-<Backspace>", withFocused hideWindow)
  , ("M-S-<Backspace>", popOldestHiddenWindow)
  , ("M-[", DO.moveTo Prev NonEmptyWS)
  , ("M-]", DO.moveTo Next NonEmptyWS)
  , ("M-u", onPrevNeighbour def W.view)
  , ("M-i", onNextNeighbour def W.view)
  , ("M-r", renameWorkspace def)
  , ("M-<Left>", swapTo Prev)
  , ("M-<Right>", swapTo Next)
  , ("M-g", sendMessage $ ToggleGaps)
  , ("<F1> w", spawn "gnome-screenshot -w")
  , ("<F1> a", spawn "gnome-screenshot -a")
  , ("<F1> h", spawn "gnome-screenshot")
  , ("<XF86AudioLowerVolume>", spawn "amixer set Master 5%- unmute")
  , ("<XF86AudioRaiseVolume>", spawn "amixer set Master 5%+ unmute")
    ]
  `removeKeysP`
  [ "M-m", "M-n", "M-w" ]
 
myLayout = smartSpacing 10
           $ gaps [(U, 50), (R, 50), (L, 50), (D, 50)]
           $ hiddenWindows
           $ tiled
           ||| Full
  where
    tiled   = Tall nmaster delta ratio
    nmaster = 1
    ratio   = 1/2
    delta   = 3/100

scratchpads = [ NS "default" "alacritty -t default"
                (title =? "default")
                (customFloating $ RationalRect (1 % 5) (1 % 5) (3 % 5) (3 % 5))
              , NS "sketch" "~/scripts/spawnSketch.sh"
                (title =? "sketch")
                -- (customFloating $ RationalRect (1 % 5) (1 % 5) (3 % 5) (3 % 5))
                (customFloating $ RationalRect (1 % 10) (1 % 10) (4 % 5) (4 % 5))
              ]
#+end_src

* xmobar
:PROPERTIES:
:header-args: :tangle ~/.config/xmobar/xmobarrc
:END:

#+begin_src haskell
Config { font = "xft:victormono-12"
  -- , -- font = "-misc-fixed-*-*-*-*-30-*-*-*-*-*-*-*"
       , additionalFonts = []
       , borderColor = "black"
       , border = TopB
       , bgColor = "black"
       , fgColor = "grey"
       , alpha = 100
       , position = Top
       , textOffset = -1
       , iconOffset = -1
       , lowerOnStart = True
       , pickBroadest = False
       , persistent = False
       , hideOnStart = False
       , iconRoot = "."
       , allDesktops = True
       , overrideRedirect = True
       , commands = [ Run Network "wlp0s20f3" ["-L","0","-H","32",
                                          "--normal","green","--high","red"] 10
                    , Run Cpu ["-L","3","-H","50",
                               "--normal","green","--high","red"] 10
                    , Run Memory ["-t","Mem: <usedratio>%"] 10
                    -- , Run Swap [] 10
                    , Run Com "uname" ["-s","-r"] "" 36000
                    , Run Date "%a %b %_d %Y %H:%M:%S" "date" 10
                    , Run StdinReader
                    , Run Volume "default" "Master" [] 10
                    , Run Battery [
	                "-t", "<acstatus>: <left>% - <timeleft>",
	                "--",
	                --"-c", "charge_full",
	                "-O", "AC",
	                "-o", "Bat",
	                "-h", "green",
	                "-l", "red"
                        ] 10
                    , Run DiskU [("/", "<used>/<size>")]
                      ["-L", "20", "-H", "50", "-m", "1", "-p", "3"]
                      20
                    , Run Kbd [("us(dvorak)", "DV"), ("us", "US")]
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = "%StdinReader% }{ %battery% | %disku% | %default:Master% | %cpu% | %memory% | %wlp0s20f3% |\
                    \ <fc=#ee9a00>%date%</fc> | %kbd% | %uname%"
       }
#+end_src

* tmux
:PROPERTIES:
:header-args: :tangle ~/.tmux.conf
:END:

#+begin_src sh :eval never
unbind C-b
set -g prefix m-j
bind m-j send-prefix
set -g default-terminal "screen-256color"
set -g status-position top	
#+end_src

#+begin_src sh :eval never
set -g status-position top
set -g mouse on
set -g status-left ''
set -g status-right ''
set status-style 'bg=colour236 fg=colour255'
setw -g window-status-style 'fg=colour255 bg=colour237'
#+end_src

#+RESULTS:
