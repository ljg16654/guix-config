#+title: dotfiles
#+STARTUP: content

* xmodmap
:PROPERTIES:
:header-args: :tangle ~/.Xmodmap
:END:

** semicolon as mode_switch

The idea is from https://oremacs.com/2015/02/14/semi-xmodmap/

#+begin_src fundamental
keycode  47 = Mode_switch Mode_switch Mode_switch
#+end_src

*** put control at the right position

#+begin_src fundamental
keycode  37 = Control_L NoSymbol Control_L
#+end_src

*** use right control as hyper

#+begin_src fundamental
keycode 105 = Hyper_R
#+end_src

*** put esc to the left of 1

#+begin_src fundamental
keycode  49 = Escape Escape
#+end_src

*** for {1-9} âˆª {0}, mode_switch acts as shift

#+begin_src fundamental
keycode  10 = 1 exclam exclam U2081
keycode  11 = 2 at at U2082
keycode  12 = 3 numbersign numbersign U2083
keycode  13 = 4 dollar dollar U2084
keycode  14 = 5 percent percent U2085
keycode  15 = 6 asciicircum asciicircum U2086
keycode  16 = 7 ampersand ampersand U2087
keycode  17 = 8 asterisk asterisk U2605
keycode  18 = 9 parenleft parenleft U2089
keycode  19 = 0 parenright parenright U2080
#+end_src

*** for a-z

#+begin_src fundamental
keycode  24 = q Q U03B8 U0398
keycode  25 = w W backslash bar
keycode  26 = e E equal U0395
keycode  27 = r R U03C1
keycode  28 = t T asciitilde U03A4
keycode  29 = y Y grave U03A5
keycode  30 = u U U03C8 U03A8
keycode  31 = i I Tab ISO_Left_Tab
keycode  32 = o O asciicircum U039F
keycode  33 = p P U03C0 U03A0
keycode  38 = a A minus U03b1
keycode  39 = s S underscore U039E
keycode  40 = d D colon U0394
keycode  41 = f F BackSpace U03A6
keycode  42 = g G greater U0393
keycode  43 = h H U03B7 U0397
keycode  44 = j J semicolon U03AA
keycode  45 = k K U03BA U039A
keycode  46 = l L less U039B
keycode  52 = z Z plus U0396
keycode  53 = x X U03C7 U03A7
keycode  54 = c C U03C3 U03A3
keycode  55 = v V Return U03DE
keycode  56 = b B grave U03B2
keycode  57 = n N U03BD U039D
keycode  58 = m M U03BC U039C
#+end_src

*** hyper key, reset modifiers and locks

#+begin_src fundamental
clear control
clear lock
clear mod1
clear mod3
keycode 66 = Control_L
keycode 37 = Caps_Lock
add control = Control_L
add lock = Caps_Lock
add mod1 = Alt_L Alt_R
add mod3 = Hyper_R
#+end_src

* alacritty
:PROPERTIES:
:header-args: :tangle ~/.config/alacritty/alacritty.yml
:END:

** fonts

#+begin_src yaml
font:
  # The size to use.
  size: 18
  # The normal (roman) font face to use.
  normal:
    family: Victor Mono
    # Style can be specified to pick a specific face.
    style: regular

  # The bold font face
  bold:
    family: Victor Mono
    # Style can be specified to pick a specific face.
    style: bold

  # The italic font face
  italic:
    family: Victor Mono
    # Style can be specified to pick a specific face.
    style: italic
#+end_src

** window geometry

#+begin_src yaml

window:
  dimensions:
    columns: 100
    lines: 20

#+end_src

** colors and opacity

*** TODO dark mode

*** TODO light mode

#+begin_src yaml
background_opacity: 1.0

colors:
  primary:
    # dark
    background: '#000000'
    foreground: '#eeeedd'
    # light
    background: '#ffffff'
    foreground: '#000000'
  normal:
    black: '#000000'
    red: '#ff8059'
    green: '#44bc44'
    yellow: '#eecc00'
    blue: '#2fafff'
    magenta: '#feacd0'
    cyan: '#00d3d0'
    white: '#eeeedd'    

#+end_src

* mail
** offlineimap
:PROPERTIES:
:header-args: :tangle ~/.config/offlineimap/config
:END:

*** function for password-store query
:PROPERTIES:
:header-args: :tangle ~/.config/offlineimap/offlineimap.py
:END:

#+begin_src python :tangle-mode (identity #o755)
#!/usr/bin/env python2
import subprocess

def get_pass(account):
    return subprocess.Popen("pass" + " " + account + "/email",
                           shell=True,
                           stdout=subprocess.PIPE,
                           universal_newlines=True).communicate()[0].split("\n")[0]

#+end_src

*** general settings

#+begin_src conf
[general]
accounts = SJTU, UMich
pythonfile = ~/.config/offlineimap/offlineimap.py
maxsyncaccounts = 2

# metadata dir
metadata = ~/.config/offlineimap/metadata
#+end_src

*** SJTU

#+begin_src conf

[Account SJTU]
localrepository = LocalSJTU
remoterepository = RemoteSJTU
# sync mail periodically in minutes
autorefresh = 5
quick = 10
postsynchook = mu index --maildir ~/Maildir

[Repository LocalSJTU]
type = Maildir
localfolders = ~/Maildir/SJTU

[Repository RemoteSJTU]
type = IMAP
maxconnections = 2
remotehost = imap.sjtu.edu.cn
remoteuser = ljg16654
remotepasseval = get_pass("SJTU")
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
#+end_src

*** UMich

#+begin_src conf
[Account UMich]
localrepository = LocalUMich
remoterepository = RemoteUMich
proxy = HTTP:127.0.0.1:7890
# sync mail periodically in minutes
autorefresh = 5
quick = 10
postsynchook = mu index --maildir ~/Maildir

[Repository LocalUMich]
type = Maildir
localfolders = ~/Maildir/UMich

[Repository RemoteUMich]
type = Gmail
maxconnections = 2
# remotehost = imap.gmail.com
ssl = yes
remoteuser = hcimu@umich.edu
remotepasseval = get_pass("umich")
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
# sslcacertfile = OS-DEFAULT
#+end_src

* compton
:PROPERTIES:
:header-args: :tangle ~/.config/compton/compton.conf
:END:

** TODO light mode

#+begin_src conf
opacity-rule = [ "80:class_g = 'qutebrowser'"];
#+end_src

** TODO dark mode

* qutebrowser
:PROPERTIES:
:header-args: :tangle ~/.config/qutebrowser/config.py
:END:

For documentation, see
+ qute://help/configuring.html
+ qute://help/settings.html

** load autoconfig

#+begin_src python
config.load_autoconfig()
#+end_src

** user agency, js and image rendering

#+begin_src python
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://accounts.google.com/*')

config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://docs.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

#+end_src

** proxy

#+begin_src python
c.content.proxy = 'http://127.0.0.1:7890'
#+end_src

** zoom ratios

#+begin_src python
c.zoom.default = '225%'
c.zoom.levels = ["50%", "100%", "150%", "200%", "225%", "250%", "300%"]
#+end_src

** dealing with sessions and windows

#+begin_src python
c.tabs.tabs_are_windows = True
c.tabs.last_close = "ignore"

c.auto_save.session = False
c.scrolling.smooth = True
c.session.lazy_restore = False
c.content.autoplay = False
#+end_src

** color scheme

#+begin_src python
nord = {
    # Polar Night
    'nord0': '#2e3440',
    'nord1': '#3b4252',
    'nord2': '#434c5e',
    'nord3': '#4c566a',
    # Snow Storm
    'nord4': '#d8dee9',
    'nord5': '#e5e9f0',
    'nord6': '#eceff4',
    # Frost
    'nord7': '#8fbcbb',
    'nord8': '#88c0d0',
    'nord9': '#81a1c1',
    'nord10': '#5e81ac',
    # Aurora
    'nord11': '#bf616a',
    'nord12': '#d08770',
    'nord13': '#ebcb8b',
    'nord14': '#a3be8c',
    'nord15': '#b48ead',
}

## Background color of the completion widget category headers.
## Type: QssColor
c.colors.completion.category.bg = nord['nord0']

## Bottom border color of the completion widget category headers.
## Type: QssColor
c.colors.completion.category.border.bottom = nord['nord0']

## Top border color of the completion widget category headers.
## Type: QssColor
c.colors.completion.category.border.top = nord['nord0']

## Foreground color of completion widget category headers.
## Type: QtColor
c.colors.completion.category.fg = nord['nord5']

## Background color of the completion widget for even rows.
## Type: QssColor
c.colors.completion.even.bg = nord['nord1']

## Background color of the completion widget for odd rows.
## Type: QssColor
c.colors.completion.odd.bg = nord['nord1']

## Text color of the completion widget.
## Type: QtColor
c.colors.completion.fg = nord['nord4']

## Background color of the selected completion item.
## Type: QssColor
c.colors.completion.item.selected.bg = nord['nord3']

## Bottom border color of the selected completion item.
## Type: QssColor
c.colors.completion.item.selected.border.bottom = nord['nord3']

## Top border color of the completion widget category headers.
## Type: QssColor
c.colors.completion.item.selected.border.top = nord['nord3']

## Foreground color of the selected completion item.
## Type: QtColor
c.colors.completion.item.selected.fg = nord['nord6']

## Foreground color of the matched text in the completion.
## Type: QssColor
c.colors.completion.match.fg = nord['nord13']

## Color of the scrollbar in completion view
## Type: QssColor
c.colors.completion.scrollbar.bg = nord['nord1']

## Color of the scrollbar handle in completion view.
## Type: QssColor
c.colors.completion.scrollbar.fg = nord['nord5']

## Background color for the download bar.
## Type: QssColor
c.colors.downloads.bar.bg = nord['nord0']

## Background color for downloads with errors.
## Type: QtColor
c.colors.downloads.error.bg = nord['nord11']

## Foreground color for downloads with errors.
## Type: QtColor
c.colors.downloads.error.fg = nord['nord5']

## Color gradient stop for download backgrounds.
## Type: QtColor
c.colors.downloads.stop.bg = nord['nord15']

## Color gradient interpolation system for download backgrounds.
## Type: ColorSystem
## Valid values:
##   - rgb: Interpolate in the RGB color system.
##   - hsv: Interpolate in the HSV color system.
##   - hsl: Interpolate in the HSL color system.
##   - none: Don't show a gradient.
c.colors.downloads.system.bg = 'none'

## Background color for hints. Note that you can use a `rgba(...)` value
## for transparency.
## Type: QssColor
c.colors.hints.bg = nord['nord13']

## Font color for hints.
## Type: QssColor
c.colors.hints.fg = nord['nord0']

## Font color for the matched part of hints.
## Type: QssColor
c.colors.hints.match.fg = nord['nord10']

## Background color of the keyhint widget.
## Type: QssColor
c.colors.keyhint.bg = nord['nord1']

## Text color for the keyhint widget.
## Type: QssColor
c.colors.keyhint.fg = nord['nord5']

## Highlight color for keys to complete the current keychain.
## Type: QssColor
c.colors.keyhint.suffix.fg = nord['nord13']

## Background color of an error message.
## Type: QssColor
c.colors.messages.error.bg = nord['nord11']

## Border color of an error message.
## Type: QssColor
c.colors.messages.error.border = nord['nord11']

## Foreground color of an error message.
## Type: QssColor
c.colors.messages.error.fg = nord['nord5']

## Background color of an info message.
## Type: QssColor
c.colors.messages.info.bg = nord['nord8']

## Border color of an info message.
## Type: QssColor
c.colors.messages.info.border = nord['nord8']

## Foreground color an info message.
## Type: QssColor
c.colors.messages.info.fg = nord['nord5']

## Background color of a warning message.
## Type: QssColor
c.colors.messages.warning.bg = nord['nord12']

## Border color of a warning message.
## Type: QssColor
c.colors.messages.warning.border = nord['nord12']

## Foreground color a warning message.
## Type: QssColor
c.colors.messages.warning.fg = nord['nord5']

## Background color for prompts.
## Type: QssColor
c.colors.prompts.bg = nord['nord2']

# ## Border used around UI elements in prompts.
# ## Type: String
c.colors.prompts.border = '1px solid ' + nord['nord0']

## Foreground color for prompts.
## Type: QssColor
c.colors.prompts.fg = nord['nord5']

## Background color for the selected item in filename prompts.
## Type: QssColor
c.colors.prompts.selected.bg = nord['nord3']

## Background color of the statusbar in caret mode.
## Type: QssColor
c.colors.statusbar.caret.bg = nord['nord15']

## Foreground color of the statusbar in caret mode.
## Type: QssColor
c.colors.statusbar.caret.fg = nord['nord5']

## Background color of the statusbar in caret mode with a selection.
## Type: QssColor
c.colors.statusbar.caret.selection.bg = nord['nord15']

## Foreground color of the statusbar in caret mode with a selection.
## Type: QssColor
c.colors.statusbar.caret.selection.fg = nord['nord5']

## Background color of the statusbar in command mode.
## Type: QssColor
c.colors.statusbar.command.bg = nord['nord2']

## Foreground color of the statusbar in command mode.
## Type: QssColor
c.colors.statusbar.command.fg = nord['nord5']

## Background color of the statusbar in private browsing + command mode.
## Type: QssColor
c.colors.statusbar.command.private.bg = nord['nord2']

## Foreground color of the statusbar in private browsing + command mode.
## Type: QssColor
c.colors.statusbar.command.private.fg = nord['nord5']

## Background color of the statusbar in insert mode.
## Type: QssColor
c.colors.statusbar.insert.bg = nord['nord14']

## Foreground color of the statusbar in insert mode.
## Type: QssColor
c.colors.statusbar.insert.fg = nord['nord1']

## Background color of the statusbar.
## Type: QssColor
c.colors.statusbar.normal.bg = nord['nord0']

## Foreground color of the statusbar.
## Type: QssColor
c.colors.statusbar.normal.fg = nord['nord5']

## Background color of the statusbar in passthrough mode.
## Type: QssColor
c.colors.statusbar.passthrough.bg = nord['nord10']

## Foreground color of the statusbar in passthrough mode.
## Type: QssColor
c.colors.statusbar.passthrough.fg = nord['nord5']

## Background color of the statusbar in private browsing mode.
## Type: QssColor
c.colors.statusbar.private.bg = nord['nord3']

## Foreground color of the statusbar in private browsing mode.
## Type: QssColor
c.colors.statusbar.private.fg = nord['nord5']

## Background color of the progress bar.
## Type: QssColor
c.colors.statusbar.progress.bg = nord['nord5']

## Foreground color of the URL in the statusbar on error.
## Type: QssColor
c.colors.statusbar.url.error.fg = nord['nord11']

## Default foreground color of the URL in the statusbar.
## Type: QssColor
c.colors.statusbar.url.fg = nord['nord5']

## Foreground color of the URL in the statusbar for hovered links.
## Type: QssColor
c.colors.statusbar.url.hover.fg = nord['nord8']

## Foreground color of the URL in the statusbar on successful load
## (http).
## Type: QssColor
c.colors.statusbar.url.success.http.fg = nord['nord5']

## Foreground color of the URL in the statusbar on successful load
## (https).
## Type: QssColor
c.colors.statusbar.url.success.https.fg = nord['nord14']

## Foreground color of the URL in the statusbar when there's a warning.
## Type: QssColor
c.colors.statusbar.url.warn.fg = nord['nord12']

## Background color of the tab bar.
## Type: QtColor
c.colors.tabs.bar.bg = nord['nord3']

## Background color of unselected even tabs.
## Type: QtColor
c.colors.tabs.even.bg = nord['nord3']

## Foreground color of unselected even tabs.
## Type: QtColor
c.colors.tabs.even.fg = nord['nord5']

## Color for the tab indicator on errors.
## Type: QtColor
c.colors.tabs.indicator.error = nord['nord11']

## Color gradient start for the tab indicator.
## Type: QtColor
# c.colors.tabs.indicator.start = nord['violet']

## Color gradient end for the tab indicator.
## Type: QtColor
# c.colors.tabs.indicator.stop = nord['orange']

## Color gradient interpolation system for the tab indicator.
## Type: ColorSystem
## Valid values:
##   - rgb: Interpolate in the RGB color system.
##   - hsv: Interpolate in the HSV color system.
##   - hsl: Interpolate in the HSL color system.
##   - none: Don't show a gradient.
c.colors.tabs.indicator.system = 'none'

## Background color of unselected odd tabs.
## Type: QtColor
c.colors.tabs.odd.bg = nord['nord3']

## Foreground color of unselected odd tabs.
## Type: QtColor
c.colors.tabs.odd.fg = nord['nord5']

# ## Background color of selected even tabs.
# ## Type: QtColor
c.colors.tabs.selected.even.bg = nord['nord0']

# ## Foreground color of selected even tabs.
# ## Type: QtColor
c.colors.tabs.selected.even.fg = nord['nord5']

# ## Background color of selected odd tabs.
# ## Type: QtColor
c.colors.tabs.selected.odd.bg = nord['nord0']

# ## Foreground color of selected odd tabs.
# ## Type: QtColor
c.colors.tabs.selected.odd.fg = nord['nord5']

## Background color for webpages if unset (or empty to use the theme's
## color)
## Type: QtColor
# c.colors.webpage.bg = 'white'

#+end_src

** fonts

#+begin_src python
c.fonts.default_family = "Victor Mono"
c.fonts.default_size = "13pt"
c.fonts.web.family.cursive = "Victor Mono"
c.fonts.web.family.fantasy= "Victor Mono"
c.fonts.web.family.fixed = "Victor Mono"
c.fonts.web.family.sans_serif = "Iosevka"
c.fonts.web.family.serif = "Iosevka"
c.fonts.web.family.standard = "Iosevka"
#+end_src

** TODO integration with org roam capture

#+begin_src python :tangle nil
import os
# nasty tip 1: must give full path
# nasty tip 2: passing --userscript argument doesn't seem to work
config.bind("<Ctrl-r>", "spawn python /home/nil/.local/share/qutebrowser/userscripts/roam-capture.py \"{url:pretty}\" \"{title}\"")
config.unbind("wo", mode="normal")
config.bind("wo", "window-only", mode="normal")
#+end_src

* stumpwm

** start swank server

** raise-or-run
* password management

** gpg agent
:PROPERTIES:
:header-args: :tangle ~/.gnupg/gpg-agent.conf
:END:

*** specify pinentry program

#+begin_src conf
pinentry-program /run/current-system/profile/bin/pinentry-gtk-2
#+end_src
