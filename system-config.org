#+title: system configuration
#+STARTUP: content

* base configuration

#+begin_src scheme :tangle config.scm
(use-modules (gnu) 
	     (gnu system nss) 
	     (gnu packages emacs)
	     (gnu packages text-editors)
	     (gnu packages certs) 
	     (gnu packages version-control)
	     (gnu packages shells)
	     (gnu packages tmux)
	     (gnu packages admin)
	     (gnu packages linux)
	     (gnu packages audio)
	     (gnu packages pulseaudio)
	     (gnu packages rsync)
	     (gnu packages compression)
	     (gnu packages rust-apps)
	     (gnu packages curl)
	     ;; (gnu packages gnupg)
	     (gnu packages ncurses)
	     (gnu packages ssh)
	     (gnu packages password-utils)
	     (gnu services ssh)
	     (gnu services xorg)
	     (gnu services desktop)
	     (gnu services networking)
	     (gnu services sound)
	     (gnu services docker))

;; import nonfree linux module
(use-modules (nongnu packages linux)
	     (nongnu system linux-initrd))

(operating-system
  ;; using nonfree linux module
  (kernel linux)
  (initrd microcode-initrd)
  (firmware (list linux-firmware))
  (host-name "mafty")
  (timezone "Asia/Shanghai")
  (keyboard-layout (keyboard-layout "us"))
  (locale "en_US.utf8")

  (users (cons (user-account
                (name "nil")
                (comment "Empty brain.")
                (group "users")
		(shell (file-append zsh "/bin/zsh"))
                (supplementary-groups '("wheel"  	;; sudo
					"netdev" 	;; network devices
					"docker"
                                        "audio"
					"lp"		;; bluetooth
					"video")))
               %base-user-accounts))

  (packages (append (list
		     acpi
		     bat
		     bluez
		     bluez-alsa
		     curl
		     emacs
		     kakoune
		     fd
		     fish
		     git
		     htop
		     gnu-make
		     ncurses
		     nss-certs ;; for HTTPS access
		     openssh
		     password-store
		     pulseaudio
		     ripgrep
		     rsync
		     tree
		     unzip
		     tmux
		     zip
		     zsh
		     )
                    %base-packages))

  ;; Add GNOME and Xfce---we can choose at the log-in screen
  ;; by clicking the gear.  Use the "desktop" services, which
  ;; include the X11 log-in service, networking with
  ;; NetworkManager, and more.
  (services (cons*
	      (service slim-service-type)
	      (extra-special-file "/usr/bin/env"
				  (file-append coreutils "/bin/env"))
	      ;; (service alsa-service-type)
	      (service docker-service-type)
	      (bluetooth-service #:auto-enable? #t)
	      (modify-services %desktop-services
                               (delete gdm-service-type))
	      ))

  ;; Use the UEFI variant of GRUB with the EFI System
  ;; Partition mounted on /boot/efi.
  (bootloader (bootloader-configuration
                (bootloader grub-efi-bootloader)
                (target "/boot/efi")
                (keyboard-layout keyboard-layout)))

  (file-systems (append
                 (list (file-system
                         (device "/dev/nvme0n1p1")
                         (mount-point "/")
                         (type "ext4"))
                       (file-system
                         (device "/dev/nvme1n1p2")
                         (mount-point "/boot/efi")
                         (type "vfat")))
                 %base-file-systems)))
#+end_src

* profiles-meta

** principles

- isolated
- reproducible

** channels

#+begin_src scheme :tangle channel-specs.scm
(list (channel
       (name 'flat)
       (url "https://github.com/flatwhatson/guix-channel.git")
       (introduction
        (make-channel-introduction
         "33f86a4b48205c0dc19d7c036c85393f0766f806"
         (openpgp-fingerprint
          "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
      (channel
       (name 'nonguix)
       (url "https://gitlab.com/nonguix/nonguix"))
      (channel
       (name 'guix)
       (url "https://git.savannah.gnu.org/git/guix.git")
       (introduction
        (make-channel-introduction
         "9edb3f66fd807b096b48283debdcddccfea34bad"
         (openpgp-fingerprint
          "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+end_src

To pin current channels, issue the command

#+begin_src sh :results silent :shebang #!/usr/bin/env zsh
guix describe --format=channels > ~/.config/guix/channels.scm
#+end_src

** TODO script for activating/deactivating profiles

#+begin_src sh

# NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

GREEN='\033[1;32m'
RED='\033[1;30m'
NC='\033[0m'
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

profiles=$*
if [[ $# -eq 0 ]]; then
    profiles="$HOME/.config/guix/manifests/*.scm";
fi

for profile in $profiles; do
  # Remove the path and file extension, if any
  profileName=$(basename $profile)
  profileName="${profileName%.*}"
  profilePath="$GUIX_EXTRA_PROFILES/$profileName"
  manifestPath=$HOME/.config/guix/manifests/$profileName.scm

  if [ -f $manifestPath ]; then
    echo
    echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
    echo

    mkdir -p $profilePath
    guix package --manifest=$manifestPath --profile="$profilePath/$profileName"

    # Source the new profile
    GUIX_PROFILE="$profilePath/$profileName"
    if [ -f $GUIX_PROFILE/etc/profile ]; then
        . "$GUIX_PROFILE"/etc/profile
    else
        echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
    fi
  else
    echo "No profile found at path" $profilePath
  fi
done
#+end_src

** TODO script for updating profiles

** using manifest and profiles on another machine

* manifests
:PROPERTIES:
:header-args: :mkdirp yes
:END:

To install a profile from a manifest file, use the command =guix package -m [FILE]=, where =[FILE]= contains guile code that evaluates to a manifest object.

** desktop environment

#+begin_src scheme :tangle manifests/de.scm
(specifications->manifest
 (list
  ;; wm
  "ghc@8.6.5"
  "xmonad@0.15"
  "xmobar"
  "ghc-xmonad-contrib@0.16"
  ;; desktop softwares
  "alacritty"
  "qutebrowser"
  "ungoogled-chromium"
  "dmenu"
  "brightnessctl"
  "telegram-desktop"
  ;; desktop utils
  "ffmpeg"
  "arandr"
  "alsa-utils"
  "autorandr"
  "compton"
  "feh"
  "ibus"
  "ibus-rime"
  "pavucontrol"
  "redshift"
  "scrot"
  "setxkbmap"
  "sxiv"
  "wmctrl"
  "xcape"
  "xclip"
  "xev"
  "xmodmap"
  "xprop"
  "xrandr"
  "xrdb"
  ;; gtk themes
  "nordic-theme"
  "arc-theme"
  "matcha-theme"
  "materia-theme"
  ))
#+end_src

#+RESULTS:
** wacom tablet

#+begin_src scheme :tangle manifests/wacom.scm
(specifications->manifest
 (list "xournalpp"
       "mypaint"
       "libwacom"
       "xf86-input-wacom"	 ;xsetwacom, thought not working at the moment
       ))
#+end_src

#+RESULTS:

** emacs

#+begin_src scheme :tangle manifests/emacs.scm
(specifications->manifest
 (list
  "emacs-native-comp"
  "emacs-vterm"
  "emacs-pdf-tools"
  "emacs-ledger-mode"
  "emacs-auctex"
  "emacs-cdlatex"
  "emacs-org-fragtog"
  "emacs-org-roam"
  "emacs-pyim"
  "emacs-plantuml-mode"
  "emacs-git-gutter"
  ))
#+end_src

** fonts

#+begin_src scheme :tangle manifests/fonts.scm
(specifications->manifest
 (list
  "font-iosevka"
  "font-victor-mono"
  "font-wqy-microhei"
  "font-wqy-zenhei"
))
#+end_src

** media

#+begin_src scheme :tangle manifests/media.scm
(specifications->manifest
 (list
  "mpv"
  "vlc"
  "blender"
  "gimp"
  "obs"
  "imagemagick"
  "inkscape"
  "kdenlive"
  "simplescreenrecorder"))
#+end_src

** office

#+begin_src scheme :tangle manifests/office.scm
(specifications->manifest
 (list
  "offlineimap"
  "mu@1.4.15"
  "evince"
  "texlive"
  "wordnet"
  "ispell"
  "pandoc"
  "font-microsoft-times-new-roman"
  "libreoffice"
  "ghostscript"
  ))
#+end_src

** utilities

#+begin_src scheme :tangle manifests/utils.scm
(specifications->manifest
 (list "ghostscript"
       "transmission"
       "transmission-remote-gtk"
       "youtube-dl"
       "openssl"
       "wireshark"
       "plantuml"
       "graphviz"))
#+end_src

** useless

#+begin_src scheme :tangle manifests/useless.scm
(specifications->manifest
 (list "neofetch"
       "cowsay"
       ))
#+end_src

** programming

#+begin_src scheme :tangle manifests/prog.scm
(specifications->manifest
 (list "clang:extra"
       "libcxx"
       "perl"
       "python"
       "python-ipython"
       "python-matplotlib"
       "python-numpy"
       "python-pip"
       "python-scipy"
       "python2"
       "racket"
       "valgrind"
       "sbcl"
       "clojure"
       "sqlite"
       "glibc"
       "pkg-config"
       "cmake"
       "racket"
       "maxima"
       ))
#+end_src
