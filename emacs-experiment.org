#+startup: content

to run the config:

#+begin_src sh
emacs-sandbox.sh --no-package --no-refresh-packages --dir ~/.config/emacs-experiment
#+end_src

#+begin_src scheme :tangle ~/.config/emacs-experiment/emacs-manifest.scm :noweb yes
(specifications->manifest (list
			   <<guix-packages>>)
#+end_src

* Core
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs-experiment/init.el :results silent
:END:

** report startup time

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d gcs"
                     (format "%.2f seconds" (float-time (time-subtract
                                                         after-init-time
                                                         before-init-time)))
                     gcs-done)))
#+end_src

** startup speed optimization(head)

#+begin_src emacs-lisp
(defvar arche/file-name-handler-alist file-name-handler-alist)

(setq gc-cons-threshold 128000000
      gc-cons-percentage 0.6)

(setq inhibit-startup-message nil)
(setq custom-file (file-name-concat user-emacs-directory "custom.el"))
(load custom-file)
(setq warning-minimum-log-level :error)
#+end_src

** package management with straight.el

#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(setq straight-disable-native-compile nil)
(setq straight-check-for-modifications nil) ;; experimental

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
#+end_src

** elisp
*** libraries

#+begin_src emacs-lisp
(use-package general)
(use-package which-key)
(use-package s)
(use-package dash)
(use-package f)
(use-package transient)
(use-package ov)
#+end_src

*** custom functions

#+begin_src emacs-lisp
(defun arche/search-font ()
  "Search for font with completing-read api and insert."
  (interactive)
  (insert (completing-read "Insert font: " (-uniq (font-family-list)))))
#+end_src

*** lisp editing

#+begin_src emacs-lisp
(use-package paren-face)
(use-package highlight-parentheses)
(use-package lispy
  :config
  (define-key lispy-mode-map (kbd "M-o") #'ace-window)
  (define-key lispy-mode-map (kbd "M-i") #'consult-imenu)
  (define-key lispy-mode-map (kbd "M-u") #'lispy-iedit))

(defun arche-lisps-hook ()
  (lispy-mode t)
  (paren-face-mode t)
  (highlight-parentheses-mode t))

(add-hook 'emacs-lisp-mode-hook #'arche-lisps-hook)
(define-key emacs-lisp-mode-map (kbd "C-c C-c") #'eval-buffer)
#+end_src

** company

#+begin_src emacs-lisp
(use-package company
  :init (global-company-mode)
  :config
  (setq company-idle-delay 0.2)
  (setq tab-always-indent 'complete)) 
#+end_src

** wordnet

#+begin_src emacs-lisp
(use-package wordnut
  :config 
;;;###autoload
  (defun org-capture-wordnut-capture ()
    "Get the word being displayed in *Wordnut* buffer if it exists."
    (with-current-buffer "*WordNut*"
      (wordnut--lexi-word)))
  
;;;###autoload
  (defun arche/wordnut-search (word)
    "Prompt for a word to search for, then do the lookup."
    (interactive (list
		  (wordnut--completing
		   (if (eq major-mode 'pdf-view-mode) "" (current-word t t)))))
    (ignore-errors
      (wordnut--history-update-cur wordnut-hs))
    (wordnut--lookup word))

;;;###autoload
  (defun wordnut-search-and-capture ()
    "Perform wordnut-search and then capture."
    (interactive)
    (progn
      ;; (call-interactively #'wordnut-search)
      (call-interactively #'arche/wordnut-search)
      (org-capture nil "w")
      (org-capture-finalize)))

  (global-set-key (kbd "s-w") #'wordnut-search-and-capture))
#+end_src

** window and buffer management

*** posframe

#+begin_src emacs-lisp
(use-package posframe)
#+end_src

*** winner

#+begin_src emacs-lisp
(use-package winner
  ;; EXWM closing floating window causes winner-mode to crash
  :init
  (winner-mode t)
  :config
  (global-set-key (kbd "s--") #'winner-undo)
  (global-set-key (kbd "s-=") #'winner-redo))
#+end_src

*** ace-window

#+begin_src emacs-lisp
(use-package ace-window
  :init (ace-window-display-mode t)
  :config
  (setq aw-keys
	(list ?a ?s ?d ?f ?j ?k ?l ?q ?w ?e ?r ?x ?c ?v))
  (global-set-key (kbd "M-o") #'ace-window))
#+end_src

*** Bufler

#+begin_src emacs-lisp
(use-package bufler
  :init
  (bufler-mode)
  :config
  (define-key bufler-list-mode-map (kbd "K") #'bufler-list-buffer-kill)
  (define-key bufler-list-mode-map (kbd "P") #'bufler-list-buffer-peek)
  (global-set-key (kbd "s-o") #'bufler-switch-buffer)
  (setf bufler-groups (bufler-defgroups
			(group
			 ;; Subgroup collecting all named workspaces.
			 (auto-workspace))
			(group
			 (group-or "notes"
				   (dir "~/library/note/" 1)
				   (dir "~/org-roam/" 2)
				   (dir "~/org/" 2)))
			(group
			 (group-or "library"
				   (dir "~/library/pdf" 1)))
			(group
			 (group-or "haskell"
				   (mode-match "haskell" (rx (or "haskell-mode"
								 "interactive-haskell-mode"
								 "haskell-interactive-mode")))))
			(group
			 ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
			 (group-or "*Help/Info*"
				   (mode-match "*Help*" (rx bos "help-"))
				   (mode-match "*Info*" (rx bos "info-"))))
			(group
			 ;; Subgroup collecting all special buffers (i.e. ones that are not
			 ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
			 ;; through to other groups, so they end up grouped with their project buffers).
			 (group-and "*Special*"
				    (lambda (buffer)
				      (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
							   buffer)
						  (funcall (mode-match "Dired" (rx bos "dired"))
							   buffer)
						  (funcall (auto-file) buffer))
					"*Special*")))
			 (group
			  ;; Subgroup collecting these "special special" buffers
			  ;; separately for convenience.
			  (name-match "**Special**"
				      (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
			 (group
			  ;; Subgroup collecting all other Magit buffers, grouped by directory.
			  (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
			  (auto-directory))
			 ;; Subgroup for Helm buffers.
			 (mode-match "*Helm*" (rx bos "helm-"))
			 ;; Remaining special buffers are grouped automatically by mode.
			 (auto-mode))
			;; All buffers under "~/.emacs.d" (or wherever it is).
			(dir user-emacs-directory)
			(group
			 ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
			 ;; `org-directory' is not yet defined).
			 (dir (if (bound-and-true-p org-directory)
				  org-directory
				"~/org"))
			 (group
			  ;; Subgroup collecting indirect Org buffers, grouping them by file.
			  ;; This is very useful when used with `org-tree-to-indirect-buffer'.
			  (auto-indirect)
			  (auto-file))
			 ;; Group remaining buffers by whether they're file backed, then by mode.
			 (group-not "*special*" (auto-file))
			 (auto-mode))
			(group
			 ;; Subgroup collecting buffers in a projectile project.
			 (auto-projectile))
			(group
			 ;; Subgroup collecting buffers in a version-control project,
			 ;; grouping them by directory.
			 (auto-project))
			;; Group remaining buffers by directory, then major mode.
			(auto-directory)
			(auto-mode))))

#+end_src

*** dogears

#+begin_src emacs-lisp
(use-package dogears
  :straight (:host github :repo "alphapapa/dogears.el" :branch "master")
  :init (dogears-mode))
#+end_src

*** custom functions

#+begin_src emacs-lisp
;;;###autoload
(defun arche/kill-current-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))

;;;###autoload
(defun my-tab-tab-bar-toggle ()
  "Toggle `tab-bar' presentation."
  (interactive)
  (if (bound-and-true-p tab-bar-mode)
      (progn
        (setq tab-bar-show nil)
        (tab-bar-mode -1))
    (setq tab-bar-show t)
    (tab-bar-mode 1)))
#+end_src

*** custom keybindings

#+begin_src emacs-lisp
(global-set-key (kbd "C-c s") #'window-toggle-side-windows)
(global-set-key (kbd "s-k") #'arche/kill-current-buffer)
(global-set-key (kbd "s-.") #'tab-bar-switch-to-next-tab)
(global-set-key (kbd "s-,") #'tab-bar-switch-to-prev-tab)
#+end_src

*** ~display-buffer-alist~

#+begin_src emacs-lisp
(setq display-buffer-alist
      '(("\\*lsp-ui-imenu\\*"
	(display-buffer-in-side-window)
	(window-width . 0.25)
	(side . right)
	(slot . 1)
	(window-parameters . ((no-other-window . t)
			      (mode-line-format . none))))
       ("\\*Messages\\*"
        (display-buffer-in-side-window)
        (window-height . 0.16)
        (side . top)
        (slot . 1)
        (window-parameters . ((no-other-window . t))))
       ("\\*Org Agenda\\*"
        (display-buffer-in-side-window)
        (window-width . 0.382)
        (side . right)        (side . right)
        (slot . 1)
        (window-parameters . ((mode-line-format . none))))
       ("\\*Outline.*\\*"
        (display-buffer-in-side-window)
        (window-width . 0.3)
        (side . right)
        (slot . 1)
        (window-parameters . ((mode-line-format . none))))
       ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\)\\*"
        (display-buffer-in-side-window)
        (window-height . 0.16)
        (side . top)
        (slot . 2)
        (window-parameters . ((no-other-window . t))))
       ;; bottom side window
       ("\\*Python\\*"
        (display-buffer-reuse-mode-window display-buffer-at-bottom)
        (window-height . 0.4)
        (side . bottom)
        (slot . 1)
	(window-parameters ((mode-line-format . none))))
       ("\\(?:\\*\\(?:e?shell\\)\\|vterm\\)"
	(display-buffer-in-side-window)
	(window-height . 0.27)
	(side . top)
	(slot . 1)
	(window-parameters . ((header-line-format . ((:eval (concat "  " (buffer-name)))))
			      (mode-line-format . none))))
       ("\\*ielm\\*"
        (display-buffer-reuse-mode-window display-buffer-at-bottom)
        (window-height . 0.4)
        (side . bottom)
        (slot . 2))
       ("\\*Async Shell Command\\*"
	(display-buffer-no-window))
       ;; left side window
       ("\\*Help.*"
        (display-buffer-reuse-mode-window display-buffer-at-bottom)
        (window-height . 0.35)		; See the :hook
        (side . left)
        (slot . 0))
       ("\\*pytest.*"
	(display-buffer-in-side-window)
	(window-width . 0.5)		; See the :hook
	(side . left)
	(slot . 0))))
#+end_src

and a few other custom rules:

#+begin_src emacs-lisp
(add-hook 'help-mode-hook #'visual-line-mode)
(add-hook 'custom-mode-hook #'visual-line-mode)
(setq Man-notify-method 'pushy)
#+end_src

*** pop up

#+begin_src emacs-lisp
;;;###autoload
(defun arche/toggle-window-with-major-mode (&optional major-mode-to-toggle raise-win-fn)
  "Toggle windows with specific major-mode in current frame. This
function is mainly written for major-modes of inferior
intepreters or shells.

If the argument `major-mode-to-toggle' is not given, choose the
major-mode associated with current buffer.

If no live windows with specified major-mode exist in current
frame, call `raise-win-fn' to open one. Otherwise, close all
lives windows that match specified major-mode.
"
  (interactive)
  (let* ((wl (window-list))
	 (mm (if major-mode-to-toggle major-mode-to-toggle major-mode))
	 (wl-filtered (-filter
		       #'(lambda (win)
			   (equal mm (with-current-buffer (window-buffer win) major-mode)))
		       wl)))
    (pcase (length wl-filtered)
      (0 (and raise-win-fn (funcall raise-win-fn)))
      (_ (mapcar #'delete-window wl-filtered)))))

;;;###autoload
(defun arche/switch-to-first-by-major-mode (mm)
  (switch-to-buffer-other-window (-first #'(lambda (buf)
					     (with-current-buffer buf (derived-mode-p mm)))
					 (buffer-list))))
#+end_src

** appearance

*** ui components

#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode -1)
(setq tab-bar-new-button nil)
(setq tab-bar-close-button nil)
#+end_src

*** fonts

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "Victor Mono" :weight 'normal :height 140)
(set-face-attribute 'fixed-pitch nil :family "Iosevka")
(set-face-attribute 'variable-pitch nil :family "Iosevka Fixed")
(setq-default line-spacing 0.1)
(add-hook 'org-mode-hook #'(lambda ()
			     (setq line-spacing 0.15)))
#+end_src

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"font-iosevka"
"font-victor-mono"

#+end_src

*** theme

#+begin_src emacs-lisp
(use-package modus-themes
  :config
  (setq modus-themes-org-blocks 'gray-background)
  (setq modus-themes-mode-line '3d))

(use-package bespoke-themes
  :straight (:host github :repo "mclear-tools/bespoke-themes" :branch "main")
  :config
  (setq bespoke-set-mode-line nil)
  (setq bespoke-set-theme 'light))

(load-theme 'bespoke t)
#+end_src

*** modeline

**** hide mode line
#+begin_src emacs-lisp
(use-package hide-mode-line)
#+end_src

**** TODO custom mode line format

#+begin_src emacs-lisp
;;;###autoload
(defun arche/bib-pdf-get-title ()
    (let*
	((my-global-bibtex-file "~/library/hcimu.bib")
	 (key (file-name-base))
	 (bibtex-file-live-p (get-buffer (file-name-nondirectory my-global-bibtex-file))))
      (with-current-buffer (find-file-noselect my-global-bibtex-file)
	(goto-char (bibtex-find-entry key t))
	(let ((title (bibtex-autokey-get-field "title")))
	  (unless bibtex-file-live-p (kill-buffer (current-buffer)))
	  title))))

;;;###autoload
(defun arche/mode-line-disp-buffer-name ()
  "Buffer name displayed in mode-line."
  (let* ((bn (buffer-name))
	 (fn (buffer-file-name))
	 (l (length bn))
	 (lmax 21)
	 (lside (floor (/ (- lmax 3) 2))))
    (cond
     ((org-roam-node-at-point)
      (concat " " (org-roam-node-title (org-roam-node-at-point))))
     ((and (s-prefix? (file-truename "~/library/pdf/") (buffer-file-name))
	   (equal major-mode 'pdf-view-mode))
      (concat " " (arche/bib-pdf-get-title)))
     ((> l lmax) (concat
		  (s-left lside bn)
		  "..."
		  (s-right lside bn)))
     (t bn))))

;;;###autoload
(defun +format-mode-line ()
  (let* ((lhs '((:eval (unless (equal major-mode 'exwm-mode) (meow-indicator)))
		" "
		(:eval (window-parameter (selected-window) 'ace-window-path))
		(:eval (unless (member major-mode '(exwm-mode
						    pdf-view-mode))
			 " Row %l "))
		(:eval (if (equal major-mode 'pdf-view-mode) (format " Page %d/%d "
								     (pdf-view-current-page)
								     (pdf-cache-number-of-pages))))
		(:eval (when (bound-and-true-p flycheck-mode) flycheck-mode-line))
		(:eval (when (bound-and-true-p flymake-mode)
			 flymake-mode-line-format))
		"  "
		(:eval (arche/mode-line-disp-buffer-name))))
	 (rhs '((:eval mode-name)
		(vc-mode vc-mode)))
	 (ww (window-width))
	 (lhs-str (format-mode-line lhs))
	 (rhs-str (format-mode-line rhs))
	 (rhs-w (string-width rhs-str)))
    (format "%s%s%s"
	    lhs-str
	    (propertize " " 'display `((space :align-to (- (+ right right-fringe right-margin) (+ 1 ,rhs-w)))))
	    rhs-str))) 
#+end_src

**** display mode line in header line

#+begin_src emacs-lisp
(defun arche/setup-lines ()
  (setq-default mode-line-format nil)
  (setq-default header-line-format '((:eval (+format-mode-line)))))

(add-hook 'emacs-startup-hook #'arche/setup-lines) 

#+end_src

**** display global mode line content in tab bar

#+begin_src emacs-lisp
(custom-set-variables '(tab-bar-format
			'(tab-bar-format-history
                          tab-bar-format-tabs
                          tab-bar-separator
                          tab-bar-format-add-tab
			  tab-bar-format-align-right
			  tab-bar-format-global)))
#+end_src

** minibuffer

*** save history

#+begin_src emacs-lisp
(use-package savehist
    :config
    (setq history-length 25)
    (savehist-mode 1))
#+end_src

*** completion style

#+begin_src emacs-lisp
(use-package orderless)

(setq completion-styles '(orderless partial-completion))
;; for file name completion, ignore case
(setq read-file-name-completion-ignore-case t)
(setq read-buffer-completion-ignore-case t)
#+end_src

*** vertico and marginalia

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode t))

(use-package marginalia
  :after vertico
  :straight t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

*** embark

#+begin_src emacs-lisp
(use-package embark
  :after which-key
  :config
  (define-key global-map (kbd "C-,") #'embark-act)
  ;; which-key integration
  (setq embark-action-indicator
        (lambda (map _target)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator))
#+end_src

*** consult

#+begin_src emacs-lisp
(use-package consult
  :config
  (global-set-key (kbd "M-i") #'consult-imenu))
#+end_src

** editing

*** input method

#+begin_src emacs-lisp
(use-package pyim
  :after posframe
  :config
  (use-package pyim-basedict
    :config (pyim-basedict-enable))
  (setq pyim-default-scheme 'quanpin)
  (setq pyim-page-tooltip 'posframe)
  (setq pyim-page-length 5))

;;;###autoload
(defun arche/toggle-input-method (&optional im)
  (if current-input-method
      (set-input-method nil)
    (set-input-method im)))

;;;###autoload
(defun arche/toggle-cn-im ()
  (interactive)
  (arche/toggle-input-method "pyim"))

;;;###autoload
(defun arche/toggle-TeX-im ()
  (interactive)
  (arche/toggle-input-method "TeX")) 
#+end_src

*** modal editing with meow

#+begin_src emacs-lisp
(use-package meow
  :init
  (meow-global-mode)
  :config
  (meow-setup-line-number)
  (setq meow-expand-hint-remove-delay 2.0)
  
  ;; fallback commands:
  ;; the cdr's are called when there's no available selection
  (setq meow-selection-command-fallback
	'((meow-replace . meow-replace-char)
	  (meow-change . meow-change-char)
	  (meow-save . meow-save-char)
	  (meow-kill . meow-C-k)
	  (meow-delete . meow-C-d)
	  (meow-cancel-selection . meow-keyboard-quit)
	  (meow-pop . meow-pop-grab)))

  ;; list of default states
  (setq meow-mode-state-list '((cider-browse-spec-view-mode . motion)
			       (bibtex-mode . normal)
			       (fundamental-mode . normal)
			       (occur-edit-mode . normal)
			       (irc-mode . normal)
			       (text-mode . normal)
			       (prog-mode . normal)
			       (conf-mode . normal)
			       (cider-repl-mode . normal)
			       (inferior-haskell-mode . normal)
			       (inferior-python-mode . normal)
			       (haskell-interactive-mode . normal)
			       (geiser-repl-mode . normal)
			       (eshell-mode . normal)
			       (shell-mode . normal)
			       (eshell-mode . normal)
			       (vterm-mode . normal)
			       (json-mode . normal)
			       (pass-view-mode . normal)
			       (telega-chat-mode . normal)
			       (help-mode . normal)
			       (py-shell-mode . normal)
			       (term-mode . normal)
			       (org-mode . normal)
			       (Custom-mode . normal)))

  (setq meow-replace-state-name-list
	(list (cons 'normal "(=ↀωↀ=)")
	      (cons 'motion "<M>")
	      (cons 'keypad "<K>")
	      ;;(cons 'insert "(^･ｪ･^)")
	      (cons 'insert "(=ⒾωⒾ=)")))

  (set-face-attribute 'meow-normal-indicator nil
		      :foreground (face-attribute 'mode-line :background)
		      :background (face-attribute 'default :foreground))
  (set-face-attribute 'meow-insert-indicator nil
		      :foreground (face-attribute 'default :background)
		      :background (face-attribute 'font-lock-constant-face :foreground))

  (setq meow-expand-hint-remove-delay 2.0)
  
  ;; fallback commands:
  ;; the cdr's are called when there's no available selection
  (setq meow-selection-command-fallback
	'((meow-replace . meow-replace-char)
	  (meow-change . meow-change-char)
	  (meow-save . meow-save-char)
	  (meow-kill . meow-C-k)
	  (meow-delete . meow-C-d)
	  (meow-cancel-selection . meow-keyboard-quit)
	  (meow-pop . meow-pop-grab)))

  (setq meow-replace-state-name-list
	(list (cons 'normal "(=ↀωↀ=)")
	      (cons 'motion "")
	      (cons 'keypad "")
	      (cons 'insert "(^･ｪ･^)")))
  
  (set-face-attribute 'meow-normal-indicator nil
		      :foreground (face-attribute 'mode-line :background)
		      :background (face-attribute 'default :foreground))

  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)

  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev))

  (meow-leader-define-key
   '("a" . execute-extended-command)
   '("b" . arche/open-pdf-in-library)
   '("c" . meow-keypad-start)
   '("C" . find-file-in-emacs-config)
   '("d" . hl-todo/body)
   '("f" . org-roam-node-find)
   '("g" . meow-keypad-start)
   '("h" . meow-keypad-start)
   '("i" . meow-last-buffer)
   '("k" . arche/kill-current-buffer)
   '("l" . recenter-top-bottom)
   '("M" . bookmark-jump)
   '("n" . ivy-magit-todos)
   '("j" . meow-motion-origin-command)
   '("o" . bufler-switch-buffer)
   '("p" . project-find-file)
   '("P" . projectile-find-other-file)
   '("r" . revert-buffer)
   '("s" . consult-ripgrep)
   '("S" . (lambda () (interactive) (consult-ripgrep t)))
   '("t" . tab-bar-select-tab-by-name)
   '("Tn" . org-timer-set-timer)
   '("Tk" . org-timer-stop)
   '("u" . tab-bar-switch-to-recent-tab)
   '("v" . arche/toggle-vterm)
   '("w" . save-buffer)
   '("x" . meow-keypad-start)
   '("zt" . arche/toggle-TeX-im)
   '("zc" . calendar)
   '("zg" . golden-ratio)
   '("zo" . olivetti-mode)
   '("zp" . proced)
   '("zr" . rename-buffer)
   '("zw" . bufler-workspace-frame-set)
   '("<return>" . arche/recompile-dwim)
   '("SPC" . meow-motion-origin-command)
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("<tab>" . arche/exwm-recent-workspace)
   '(":" . eval-expression)
   '("/" . consult-line)
   '("?" . meow-cheatsheet))

  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '(";" . comment-line)
   ;; left hand
   '("q" . meow-quit)
   '("w" . other-window)
   '("W" . delete-other-windows)
   '("e" . meow-append)
   '("r" . meow-reverse)
   '("R" . meow-replace)
   '("t" . meow-till)
   '("T" . meow-till-expand)
   '("a" . meow-insert)
   '("s" . meow-visit)
   '("f" . meow-find)
   '("F" . meow-find-expand)
   '("d" . meow-kill)
   '("f" . meow-visit)
   '("g" . meow-cancel)
   '("z" . meow-pop-selection)
   '("Z" . meow-pop-all-selection)
   '("x" . meow-C-d)
   '("c" . meow-change)
   '("C" . meow-change-save)
   '("v" . kill-ring-save)
   ;; TODO: b
   '("b" . meow-left)
   '("B" . meow-left-expand)

   ;; right hand
   '("y" . meow-yank)
   '("Y" . meow-yank-pop)
   '("u" . meow-mark-symbol)
   '("i" . meow-inner-of-thing)
   '("I" . meow-bounds-of-thing)
   '("o" . meow-open-below)
   '("O" . meow-open-above)
   '("p" . meow-block)
   '("P" . meow-block-expand)
   '("b" . meow-left)
   '("B" . meow-left-expand)
   '("h" . meow-back-word)
   '("H" . meow-back-symbol)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("n" . meow-right)
   '("N" . meow-right-expand)
   '("'" . point-to-register)
   '("l" . meow-next-word)
   '("L" . meow-next-symbol)
   '("m" . point-to-register)
   '("," . meow-line-expand)
   '("." . repeat)
   '("/" . meow-search)
   ;; TODO: o
   '("G" . meow-grab)
   '("&" . meow-query-replace)
   '("%" . meow-query-replace-regexp)
   '("'" . jump-to-register)
   '("\\" . quoted-insert)))
#+end_src

*** focused writing

#+begin_src emacs-lisp
(use-package olivetti)
#+end_src

*** code folding

#+begin_src emacs-lisp
(use-package outshine)
#+end_src

** version-control

#+begin_src emacs-lisp
(use-package magit)

(use-package magit-todos
  :config
  (magit-todos-mode)
  (global-set-key (kbd "C-x l") #'ivy-magit-todos))
#+end_src

** tramp

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"emacs-tramp"

#+end_src

Add guix system program path:

#+begin_src emacs-lisp
(setq tramp-remote-path
      '("/run/current-system/profile/bin" "/bin" "/usr/bin" "/sbin" "/usr/sbin" "/usr/local/bin" "/usr/local/sbin" "/local/bin" "/local/freeware/bin" "/local/gnu/bin" "/usr/freeware/bin" "/usr/pkg/bin" "/usr/contrib/bin" "/opt/bin" "/opt/sbin" "/opt/local/bin"))
#+end_src

** org

*** guix packages

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"emacs-cdlatex"
"emacs-org-fragtog"

#+end_src

*** emacs packages

#+begin_src emacs-lisp
(use-package org-bullets :after org)
(use-package org-fragtog :after org :straight nil)
(use-package cdlatex :straight nil)
(use-package org-pdftools
  :after (pdf-tools org)
  :hook (org-mode . org-pdftools-setup-link))
#+end_src

*** basic setup

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-basic ()
  (setq org-imenu-depth 7)
  (setq system-time-locale "C")
  (setq org-export-with-toc nil)
  (setq org-link-elisp-skip-confirm-regexp (rx (or "man" "wordnut-search"))))
#+end_src

*** display

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-display ()
  (setq org-ellipsis " ▾")
  (setq org-capture-bookmark nil)
  (setq org-image-actual-width nil)
  (plist-put org-format-latex-options :scale 4))
#+end_src

*** window rules

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-window ()
  (setq org-link-frame-setup
	'((vm . vm-visit-folder-other-frame)
	  (vm-imap . vm-visit-imap-folder-other-frame)
	  (gnus . org-gnus-no-new-news)
	  (file . find-file)
	  (wl . wl-other-frame))))
#+end_src

*** agenda

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-agenda ()
  (setq org-agenda-files (list "~/org/todo.org")))
#+end_src

*** capture

#+begin_src emacs-lisp
(setq org-capture-templates
	'(("t" "Personal todo" entry
           (file+headline "todo.org" "Inbox")
           "* TODO %?\n%i" :prepend t)
          ("r" "read later" checkitem
           (file+headline "read-later.org" "Inbox")
           "[ ] %? ")
	  ;; TODO capture template for wordnut-buffer
          ("w" "word" plain
	   (file+headline "words.org" "Inbox")
	   "[[elisp:(wordnut-search \"%(org-capture-wordnut-capture)\")][%(org-capture-wordnut-capture)]]")))
#+end_src

*** keybindings

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-keybinding ()
  (general-define-key
   :keymaps 'org-mode-map
   "M-h" #'org-metaleft
   "M-H" #'mark-paragraph
   "M-l" #'org-metaright
   "C-c e" #'org-mark-element))
#+end_src

*** babel

**** basic setup

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-babel ()
  (setq-default org-hide-block-startup t)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-tab-src-acts-natively t)
  ;; leading whitespace not preserved on export
  (setq org-src-preserve-indentation nil)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'current-window)
  ;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append))
#+end_src

**** ob-async

#+begin_src emacs-lisp
(use-package ob-async)
#+end_src

*** oc

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-cite ()
 (let
     ((my-global-bibtex-files (list (file-truename "~/library/hcimu.bib"))))
    (require 'oc)
    (require 'oc-basic)
    ;; for oc.el
    (setq org-cite-global-bibliography my-global-bibtex-files)
    ;; for bibtex.el
    (setq bibtex-files my-global-bibtex-files)
    ))
#+end_src

*** hook

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-mode-hook ()
  (org-bullets-mode t)
  (org-indent-mode t)
  (org-cdlatex-mode)
  (org-fragtog-mode)
  (if (one-window-p) (olivetti-mode t)))
#+end_src

*** roam

#+begin_src emacs-lisp
(use-package org-roam
  :straight nil
  :after org
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/org-roam")
  (org-roam-db-location "~/tmp/org-roam-v2-experimental.db")
  :config
  (org-roam-setup)
  )

(use-package org-roam-ui
  :straight (:host github
		   :repo "org-roam/org-roam-ui"
		   :branch "main"
		   :files ("*.el" "out"))
  :after org-roam)
#+end_src

*** bibtex-actions                                                :ARCHIVE:

#+begin_src emacs-lisp
(use-package bibtex-completion)
(use-package citeproc)

(use-package oc-bibtex-actions
  :straight (:host github
		   :repo "bdarcus/bibtex-actions"
		   :branch "main")
  :bind (("C-c b" . org-cite-insert))
  :after (embark org bibtex-completion citeproc)
  :config
  (setq bibtex-actions-bibliography '("~/library/hcimu.bib"))
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  (setq bibtex-actions-at-point-function 'embark-act))
#+end_src

*** finishing setup

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup ()
  (arche/org-setup-basic)
  (arche/org-setup-display)
  (arche/org-setup-window)
  (arche/org-setup-agenda)
  (arche/org-setup-keybinding)
  (arche/org-setup-babel)
  (arche/org-setup-cite)
  (add-hook 'org-mode-hook #'arche/org-mode-hook))

(use-package org
  :after (olivetti)
  :config
  (arche/org-setup))
#+end_src

** pdf

*** pdf-tools

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"emacs-pdf-tools"

#+end_src

#+begin_src emacs-lisp
(use-package pdf-tools :straight nil
  :config
  (require 'pdf-occur)
  (require 'pdf-annot)
  (require 'pdf-outline)
  (pdf-tools-install)

  (general-define-key
   :keymaps 'pdf-view-mode-map
   ;; tips:
   ;; W to fit width
   ;; H to fit height
   "o" #'pdf-outline
   "/" #'pdf-occur
   "j" #'pdf-view-next-line-or-next-page
   "k" #'pdf-view-previous-line-or-previous-page
   "z" #'pdf-annot-add-highlight-markup-annotation
   "_" #'pdf-annot-add-underline-markup-annotation
   "v" #'image-mode-copy-file-name-as-kill
   "w" #'other-window
   "la" #'pdf-annot-list-annotations
   "L" #'org-store-link
   "," #'pdf-view-themed-minor-mode)
  
  (general-define-key
   :keymaps 'pdf-outline-buffer-mode
   "m" #'pdf-outline-follow-link)
  
  (defun arche/pdf-hook ()
    (blink-cursor-mode -1))

  (add-hook 'pdf-tools-enabled-hook #'arche/pdf-hook))

;; tips: c: toggle continuous scroll
;; M: toggle display of header line
(use-package pdf-continuous-scroll-mode
  :after pdf-tools
  :straight (:type git
		   :host github
		   :repo "dalanicolai/pdf-continuous-scroll-mode.el"))

(use-package saveplace-pdf-view
  :after pdf-tools
  :init (save-place-mode 1))
#+end_src

*** browse library

#+begin_src emacs-lisp
(defvar my-global-bibtex-file "~/library/hcimu.bib")
(defvar my-global-bibtex-pdf-dir "~/library/pdf")

(defun arche/bib-keys ()
  (with-current-buffer (find-file-noselect my-global-bibtex-file)
    (mapcar 'car
	    (-filter 'cdr
		     (bibtex-parse-keys)))))

(arche/bib-keys)

(defun arche/key->title (key)
  (with-current-buffer (find-file-noselect my-global-bibtex-file)
    (goto-char (bibtex-find-entry key t))
    (bibtex-autokey-get-field "title")))

(defun arche/key->author (key)
  (with-current-buffer (find-file-noselect my-global-bibtex-file)
    (goto-char (bibtex-find-entry key t))
    (bibtex-autokey-get-field "author")))

(defun arche/key->pdf-file (key)
  (let*
      ((pdf-files (f-files (file-name-as-directory my-global-bibtex-pdf-dir)))
       (file-matched
	(-first (lambda (f)
		  (string-equal key
				(f-base f)))
		pdf-files)))
    file-matched))

;; TODO: display author and additional info with marginalia
;; https://github.com/minad/marginalia
(defun arche/open-pdf-in-library (&optional arg)
  (interactive "P")
  (let*
      ((collection (mapcar (lambda (key) (list (concat (arche/key->title key) " | " (arche/key->author key)) key)) (arche/bib-keys)))
       (title-and-author (completing-read "select book:" collection))
       (key (cadr (assoc title-and-author collection)))
       (pdf-file (arche/key->pdf-file key)))
    (if pdf-file
	(if arg
	    (let ((command (concat "mupdf-x11" " " pdf-file)))
	      (start-process-shell-command command nil command))
	  (message "hello")
	  (find-file pdf-file))
	(message "book not found :)")))) 




#+end_src

** docker

#+begin_src emacs-lisp
(use-package docker)
#+end_src

** languages

*** shell

#+begin_src emacs-lisp
(add-to-list 'org-babel-load-languages (cons 'shell t))
#+end_src

*** haskell

#+begin_src emacs-lisp
(use-package haskell-mode
  :config
  (define-key haskell-mode-map (kbd "C-c C-c") #'haskell-process-load-file))
(add-to-list 'org-babel-load-languages (cons 'haskell t))
#+end_src

*** lisp

**** scheme

#+begin_src emacs-lisp
(add-to-list 'org-babel-load-languages (cons 'scheme t))
#+end_src

***** guile

#+begin_src emacs-lisp
(use-package geiser-guile)
#+end_src

**** clojure                                                     :ARCHIVE:

#+begin_src emacs-lisp
(use-package cider)
#+end_src

**** common lisp

#+begin_src emacs-lisp
(use-package sly)
#+end_src

*** yaml

#+begin_src emacs-lisp
(use-package yaml-mode)
(add-to-list 'org-babel-load-languages (cons 'yaml t))
#+end_src

*** python


**** babel

#+begin_src emacs-lisp
(setq org-babel-python-command "python3")
#+end_src

**** elpy

#+begin_src emacs-lisp
(use-package elpy
  :init (elpy-enable))
#+end_src

**** toggle inferior python window (requires [[*pop up]])

#+begin_src emacs-lisp
;;;###autoload
(defun arche/raise-inferior-python ()
  (interactive)
  (arche/switch-to-first-by-major-mode 'inferior-python-mode))

;;;###autoload
(defun arche/toggle-python ()
  (interactive)
  (arche/toggle-window-with-major-mode 'inferior-python-mode #'arche/raise-inferior-python))

(global-set-key (kbd "C-c p") #'arche/toggle-python)
#+end_src


** startup speed optimization(tail)

#+begin_src emacs-lisp
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1
      file-name-handler-alist arche/file-name-handler-alist)
#+end_src



* experimental

** eva

#+begin_src emacs-lisp
(use-package eva
  :straight (eva :type git :host github :repo "meedstrom/eva"))
#+end_src

