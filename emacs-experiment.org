#+title: Emacs experimental config

to run the config:

#+begin_src sh
emacs-sandbox.sh --no-package --no-refresh-packages --dir ~/.config/emacs-experiment
#+end_src

#+RESULTS:

#+begin_src scheme :tangle ~/.config/emacs-experiment/emacs-manifest.scm :noweb yes
(specifications->manifest (list
			   <<guix-packages>>)
#+end_src

to disable configuration in a subtree, refile the subtree to [[experimental]] or use ~org-toggle-archive-tag~ (bound to `C-c C-x a' by default).

* profiles

 #+begin_src emacs-lisp :tangle ~/.emacs-profiles.el
(("default"   . ((user-emacs-directory . "~/.config/emacs-experiment")))
 ("stable" . ((user-emacs-directory . "~/.config/emacs-stable")))
 ("doom"   . ((user-emacs-directory . "~/.config/emacs-doom")))
 ("dog" . ((user-emacs-directory . "~/repos/dogEmacs")))
 ("scimax" . ((user-emacs-directory . "~/repos/scimax")))
 ("mininum"   . ((user-emacs-directory . "~/.config/emacs-mininum"))))
#+end_src

* Core
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs-experiment/init.el :results silent
:END:

** report startup time

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d gcs"
                     (format "%.2f seconds" (float-time (time-subtract
                                                         after-init-time
                                                         before-init-time)))
                     gcs-done)))
#+end_src

** startup speed optimization(head)

#+begin_src emacs-lisp
;; (defvar arche/file-name-handler-alist file-name-handler-alist)

(setq gc-cons-threshold 128000000
      gc-cons-percentage 0.6)

(setq inhibit-startup-message nil)
(setq custom-file (file-name-concat user-emacs-directory "custom.el"))
(load custom-file)
(setq warning-minimum-log-level :error)
#+end_src

** faster confirmation

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** package management with straight.el

#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(setq straight-disable-native-compile nil)
(setq straight-check-for-modifications nil) ;; experimental

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
#+end_src

** elisp

*** libraries

#+begin_src emacs-lisp
(use-package general)
(use-package which-key)
(use-package s)
(use-package dash)
(use-package f)
(use-package transient)
(use-package ov)
#+end_src

*** custom functions

#+begin_src emacs-lisp
(defun arche/search-font ()
  "Search for font with completing-read api and insert."
  (interactive)
  (insert (completing-read "Insert font: " (-uniq (font-family-list)))))

(defun arche/find-in-home ()
  "find file in home directory"
  (interactive)
  (find-file (read-file-name "Find file: " "~/")))

(defun copy-buffer-file-name-as-kill (choice)
  "Copy the buffer-file-name to the kill-ring"
  (interactive "cCopy Buffer Name (F) Full, (D) Directory, (N) Name")
  (let ((new-kill-string)
        (name (if (eq major-mode 'dired-mode)
                  (dired-get-filename)
                (or (buffer-file-name) ""))))
    (cond ((eq choice ?f)
           (setq new-kill-string name))
          ((eq choice ?d)
           (setq new-kill-string (file-name-directory name)))
          ((eq choice ?n)
           (setq new-kill-string (file-name-nondirectory name)))
          (t (message "Quit")))
    (when new-kill-string
      (message "%s copied" new-kill-string)
      (kill-new new-kill-string))))
#+end_src

*** lisp editing

#+begin_src emacs-lisp
(use-package paren-face)
(use-package highlight-parentheses)
(use-package lispy
  :config
  (define-key lispy-mode-map (kbd "M-o") #'ace-window)
  (define-key lispy-mode-map (kbd "M-i") #'consult-imenu)
  (define-key lispy-mode-map (kbd "M-u") #'lispy-iedit))

(defun arche-lisps-hook ()
  (lispy-mode t)
  (paren-face-mode t)
  (highlight-parentheses-mode t))

(add-hook 'emacs-lisp-mode-hook #'arche-lisps-hook)
(define-key emacs-lisp-mode-map (kbd "C-c C-c") #'eval-buffer)
#+end_src

*** transparency

#+begin_src emacs-lisp
(defun transparency (value)
  "Set transparency value."
  (interactive "ntransparency value 0 - 100 opaque:")
 (set-frame-parameter (selected-frame) 'alpha value))
#+end_src

#+RESULTS:
: transparency

** COMMENT key-chord

#+begin_src emacs-lisp
(use-package key-chord
  :init
  (setq key-chord-two-keys-delay 0.1)
  (setq key-chord-one-key-delay 0.2)
  :config
  (key-chord-mode t)
  )
#+end_src

** avy

#+begin_src emacs-lisp
(use-package avy
  :config
  (setq avy-timeout-seconds 0.3)
  (setq avy-keys (list ?a ?s ?d ?f ?j ?k ?l ?\;)))
#+end_src

** yas

#+begin_src emacs-lisp
(use-package yasnippet
  :commands yas/global-mode
  :init (yas/global-mode t)
  :config
  (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand))
#+end_src

** company

#+begin_src emacs-lisp
(use-package company
  :init (global-company-mode)
  :config
  (setq company-idle-delay 0.2)
  (setq tab-always-indent 'complete)) 
#+end_src

** wordnet

#+begin_src emacs-lisp
(use-package wordnut
  :config 
;;;###autoload
  (defun org-capture-wordnut-capture ()
    "Get the word being displayed in *Wordnut* buffer if it exists."
    (with-current-buffer "*WordNut*"
      (wordnut--lexi-word)))
  
;;;###autoload
  (defun arche/wordnut-search (word)
    "Prompt for a word to search for, then do the lookup."
    (interactive (list
		  (wordnut--completing
		   (if (eq major-mode 'pdf-view-mode) "" (current-word t t)))))
    (ignore-errors
      (wordnut--history-update-cur wordnut-hs))
    (wordnut--lookup word))

;;;###autoload
  (defun wordnut-search-and-capture ()
    "Perform wordnut-search and then capture."
    (interactive)
    (progn
      ;; (call-interactively #'wordnut-search)
      (call-interactively #'arche/wordnut-search)
      (org-capture nil "w")
      (org-capture-finalize)))

  (global-set-key (kbd "s-w") #'wordnut-search-and-capture))
#+end_src

** rss

#+begin_src emacs-lisp
(use-package elfeed)
(global-set-key (kbd "C-x w") #'elfeed)
(setq elfeed-feeds
      '(
        ("https://www.motorsport.com/rss/f1/news/" motorsport)
	("https://emacsredux.com/atom.xml" bbatsov)
	("https://protesilaos.com/codelog.xml" prot-coding-blog)
	("https://updates.orgmode.org/feed/updates" org-mode-update)
	;; ("https://www.reddit.com/r/emacs/.rss" r/emacs)
	;; ("https://www.reddit.com/r/org-mode/.rss" r/org-mode)
	("https://events.umich.edu/group/3817/rss?v=2&html_output=true" michigan-events)
	("https://www.solidot.org/index.rss" solidot)
        ;; ("http://finance.yahoo.com/rss/headline?s=MSFT" finance)
	;; ("https://feeds.bloomberg.com/politics/news.rss" bloomberg-politics)
        ))
#+end_src

** default browser

#+begin_src emacs-lisp
(setq browse-url-generic-program "qutebrowser")
(setq browse-url-browser-function #'browse-url-generic)
#+end_src

** window and buffer management

*** grid

setup 2x2 grid for working on a vertical 27'' 4K screen.

#+begin_src emacs-lisp
(defun 2x2 ()
  (interactive)
  (let ((w (selected-window)))
    (delete-other-windows)
    (split-window-below)
    (other-window 1)
    (split-window-right)
    (select-window w)
    (split-window-right)))
#+end_src

*** posframe

#+begin_src emacs-lisp
(use-package posframe)
#+end_src

*** winner

#+begin_src emacs-lisp
(use-package winner
  ;; EXWM closing floating window causes winner-mode to crash
  :init
  (winner-mode t)
  :config
  (global-set-key (kbd "s--") #'winner-undo)
  (global-set-key (kbd "s-=") #'winner-redo))
#+end_src

*** ace-window

#+begin_src emacs-lisp
(use-package ace-window
  :init (ace-window-display-mode t)
  :config
  (setq aw-scope 'global)
  (setq aw-keys
	(list ?j ?k ?l ?\; ?, ?.))
  (global-set-key (kbd "M-o") #'ace-window))
#+end_src

*** golden-ratio

#+begin_src emacs-lisp
(use-package golden-ratio)
#+end_src

*** Bufler

#+begin_src emacs-lisp
(use-package bufler
  :init
  (bufler-mode)
  :config
  (define-key bufler-list-mode-map (kbd "K") #'bufler-list-buffer-kill)
  (define-key bufler-list-mode-map (kbd "P") #'bufler-list-buffer-peek)
  (global-set-key (kbd "s-C-o") #'bufler-switch-buffer)
  (global-set-key (kbd "s-o") #'switch-to-buffer)
  (setf bufler-groups (bufler-defgroups
			(group
			 ;; Subgroup collecting all named workspaces.
			 (auto-workspace))
			(group
			 (group-or "notes"
				   (dir "~/library/note/" 1)
				   (dir "~/org-roam/" 2)
				   (dir "~/org/" 2)))
			(group
			 (group-or "library"
				   (dir "~/library/pdf" 1)
				   (dir "~/Documents/cambridge-notes/" 1)))
			(group
			 (group-or "haskell"
				   (mode-match "haskell" (rx (or "haskell-mode"
								 "interactive-haskell-mode"
								 "haskell-interactive-mode")))))
			(group
			 ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
			 (group-or "*Help/Info*"
				   (mode-match "*Help*" (rx bos "help-"))
				   (mode-match "*Info*" (rx bos "info-"))))
			(group
			 ;; Subgroup collecting all special buffers (i.e. ones that are not
			 ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
			 ;; through to other groups, so they end up grouped with their project buffers).
			 (group-and "*Special*"
				    (lambda (buffer)
				      (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
							   buffer)
						  (funcall (mode-match "Dired" (rx bos "dired"))
							   buffer)
						  (funcall (auto-file) buffer))
					"*Special*")))
			 (group
			  ;; Subgroup collecting these "special special" buffers
			  ;; separately for convenience.
			  (name-match "**Special**"
				      (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
			 (group
			  ;; Subgroup collecting all other Magit buffers, grouped by directory.
			  (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
			  (auto-directory))
			 ;; Subgroup for Helm buffers.
			 (mode-match "*Helm*" (rx bos "helm-"))
			 ;; Remaining special buffers are grouped automatically by mode.
			 (auto-mode))
			;; All buffers under "~/.emacs.d" (or wherever it is).
			(dir user-emacs-directory)
			(group
			 ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
			 ;; `org-directory' is not yet defined).
			 (dir (if (bound-and-true-p org-directory)
				  org-directory
				"~/org"))
			 (group
			  ;; Subgroup collecting indirect Org buffers, grouping them by file.
			  ;; This is very useful when used with `org-tree-to-indirect-buffer'.
			  (auto-indirect)
			  (auto-file))
			 ;; Group remaining buffers by whether they're file backed, then by mode.
			 (group-not "*special*" (auto-file))
			 (auto-mode))
			(group
			 ;; Subgroup collecting buffers in a projectile project.
			 (auto-projectile))
			(group
			 ;; Subgroup collecting buffers in a version-control project,
			 ;; grouping them by directory.
			 (auto-project))
			;; Group remaining buffers by directory, then major mode.
			(auto-directory)
			(auto-mode))))

#+end_src

*** custom functions

#+begin_src emacs-lisp
;;;###autoload
(defun arche/kill-current-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))

;;;###autoload
(defun my-tab-tab-bar-toggle ()
  "Toggle `tab-bar' presentation."
  (interactive)
  (if (bound-and-true-p tab-bar-mode)
      (progn
        (setq tab-bar-show nil)
        (tab-bar-mode -1))
    (setq tab-bar-show t)
    (tab-bar-mode 1)))
#+end_src

*** custom keybindings

#+begin_src emacs-lisp
(global-set-key (kbd "C-c s") #'window-toggle-side-windows)
(global-set-key (kbd "s-k") #'arche/kill-current-buffer)
(global-set-key (kbd "s-.") #'tab-bar-switch-to-next-tab)
(global-set-key (kbd "s-,") #'tab-bar-switch-to-prev-tab)
#+end_src

*** ~display-buffer-alist~

#+begin_src emacs-lisp
(setq display-buffer-alist
      '(("\\*lsp-ui-imenu\\*"
	(display-buffer-in-side-window)
	(window-width . 0.25)
	(side . right)
	(slot . 1)
	(window-parameters . ((no-other-window . t)
			      (mode-line-format . none))))
       ("\\*Messages\\*"
        (display-buffer-in-side-window)
        (window-height . 0.16)
        (side . top)
        (slot . 1)
        (window-parameters . ((no-other-window . t))))
       ("\\*Org Agenda\\*"
        (display-buffer-in-side-window)
        (window-width . 0.382)
        (side . right)        (side . right)
        (slot . 1)
        (window-parameters . ((mode-line-format . none))))
       ("\\*Outline.*\\*"
        (display-buffer-in-side-window)
        (window-width . 0.3)
        (side . right)
        (slot . 1)
        (window-parameters . ((mode-line-format . none))))
       ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\)\\*"
        (display-buffer-in-side-window)
        (window-height . 0.16)
        (side . top)
        (slot . 2)
        (window-parameters . ((no-other-window . t))))
       ;; bottom side window
       ("\\*Python\\*"
        (display-buffer-reuse-mode-window display-buffer-at-bottom)
        (window-height . 0.4)
        (side . bottom)
        (slot . 1)
	(window-parameters ((mode-line-format . none))))
       ("\\(?:\\*\\(?:e?shell\\)\\|vterm\\)"
	(display-buffer-in-side-window)
	(window-height . 0.27)
	(side . top)
	(slot . 1)
	(window-parameters . ((header-line-format . ((:eval (concat "  " (buffer-name)))))
			      (mode-line-format . none))))
       ("\\*ielm\\*"
        (display-buffer-reuse-mode-window display-buffer-at-bottom)
        (window-height . 0.4)
        (side . bottom)
        (slot . 2))
       ("\\*Async Shell Command\\*"
	(display-buffer-no-window))
       ;; left side window
       ("\\*Help.*"
        (display-buffer-reuse-mode-window display-buffer-at-bottom)
        (window-height . 0.35)		; See the :hook
        (side . left)
        (slot . 0))
       ("\\*pytest.*"
	(display-buffer-in-side-window)
	(window-width . 0.5)		; See the :hook
	(side . left)
	(slot . 0))))
#+end_src

and a few other custom rules:

#+begin_src emacs-lisp
(add-hook 'help-mode-hook #'visual-line-mode)
(add-hook 'custom-mode-hook #'visual-line-mode)
(setq Man-notify-method 'pushy)
#+end_src

*** pop up

#+begin_src emacs-lisp
;;;###autoload
(defun arche/toggle-window-with-major-mode (&optional major-mode-to-toggle raise-win-fn)
  "Toggle windows with specific major-mode in current frame. This
function is mainly written for major-modes of inferior
intepreters or shells.

If the argument `major-mode-to-toggle' is not given, choose the
major-mode associated with current buffer.

If no live windows with specified major-mode exist in current
frame, call `raise-win-fn' to open one. Otherwise, close all
lives windows that match specified major-mode.
"
  (interactive)
  (let* ((wl (window-list))
	 (mm (if major-mode-to-toggle major-mode-to-toggle major-mode))
	 (wl-filtered (-filter
		       #'(lambda (win)
			   (equal mm (with-current-buffer (window-buffer win) major-mode)))
		       wl)))
    (pcase (length wl-filtered)
      (0 (and raise-win-fn (funcall raise-win-fn)))
      (_ (mapcar #'delete-window wl-filtered)))))

;;;###autoload
(defun arche/switch-to-first-by-major-mode (mm)
  (switch-to-buffer-other-window (-first #'(lambda (buf)
					     (with-current-buffer buf (derived-mode-p mm)))
					 (buffer-list))))
#+end_src

For eshell:

#+begin_src emacs-lisp
(defun arche/toggle-eshell (&optional arg)
  "Toggle or create eshell buffer.

Without prefix arg, toggle eshell. Otherwise the behavior is the same as `eshell'."
  (interactive)
  (if arg
      (eshell arg)
    (arche/toggle-window-with-major-mode 'eshell-mode #'eshell)))
#+end_src

** appearance

*** ui components

#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode -1)
(setq tab-bar-new-button nil)
(setq tab-bar-close-button nil)
#+end_src

*** fonts

- [[https://typeof.net/Iosevka/][Iosevka]]
- [[https://rubjo.github.io/victor-mono/][Victor Mono]]
- [[JuliaMono]]
- [[https://design.ubuntu.com/font/][Ubuntu font]] for variable pitch

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "Iosevka Slab" :weight 'normal :height 150)
;; (set-face-attribute 'fixed-pitch nil :family "JuliaMono" :weight 'normal)
(set-face-attribute 'fixed-pitch nil :family "Iosevka" :weight 'normal)
(set-face-attribute 'variable-pitch nil :family "Ubuntu" :weight 'light)
(setq-default line-spacing 0.15)
(add-hook 'org-mode-hook #'(lambda ()
			     (setq line-spacing 0.15)))
#+end_src

#+RESULTS:
| org-krita-mode | flyspell-mode | org-pdftools-setup-link | arche/org-mode-hook | valign-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (lambda nil (setq line-spacing 0.15)) |

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"font-iosevka"
"font-victor-mono"

#+end_src

*** theme

#+begin_src emacs-lisp
(defun arche/load-theme (theme)
  "Disable active themes and load THEME.
Taken from alphapapa's answer
https://www.reddit.com/r/emacs/comments/fefwpw/show_your_themes/"
  (interactive
   (list (intern (completing-read "Theme: "
				  (->> (custom-available-themes)
                                       (-map #'symbol-name))))))
  (mapc #'disable-theme custom-enabled-themes)
  (load-theme theme 'no-confirm))

(use-package storybook-theme
  :straight (:host github :repo "DogLooksGood/storybook-theme" :branch "master"))

(use-package joker-theme
  :straight (:host github :repo "DogLooksGood/joker-theme" :branch "master"))

(use-package notink-theme
  :straight (:host github :repo "MetroWind/notink-theme" :branch "master"))

(use-package modus-themes
  :config
  (setq modus-themes-vivendi-color-overrides
	'((bg-main . "#1d2021")
	  (fg-main . "#c2c2c2")))
  (setq modus-themes-org-blocks 'gray-background)
  (setq modus-themes-mode-line '3d))

(use-package bespoke-themes
  :straight (:host github :repo "mclear-tools/bespoke-themes" :branch "main")
  :config
  (setq bespoke-set-mode-line nil)
  (setq bespoke-set-theme 'light))

(use-package minimal-theme)

(use-package nano-theme
  :straight (:host github :repo "rougier/nano-theme" :branch "master"))

(use-package doom-themes)
(load-theme 'modus-operandi t)
#+end_src

*** telephone

#+begin_src emacs-lisp
(use-package telephone-line)
(telephone-line-mode 1)
#+end_src

** minibuffer

*** save history

#+begin_src emacs-lisp
(use-package savehist
    :config
    (setq history-length 25)
    (savehist-mode 1))
#+end_src

*** completion style

#+begin_src emacs-lisp
(use-package orderless)

(setq completion-styles '(orderless partial-completion))
;; for file name completion, ignore case
(setq read-file-name-completion-ignore-case t)
(setq read-buffer-completion-ignore-case t)
#+end_src

*** vertico and marginalia

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode t))

(use-package mini-popup
  :after vertico
  :straight (:host github :repo "minad/mini-popup"
		   :branch "main"))

(use-package marginalia
  :after vertico
  :straight t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy
			   marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src

*** embark

#+begin_src emacs-lisp
(use-package embark
  :after which-key
  :config
  (define-key global-map (kbd "C-,") #'embark-act)
  ;; which-key integration
  (setq embark-action-indicator
        (lambda (map _target)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator))
#+end_src

*** consult

#+begin_src emacs-lisp
(use-package consult
  :config
  (global-set-key (kbd "M-i") #'consult-imenu))

(use-package consult-dir)
#+end_src

** dired

#+begin_src emacs-lisp
(add-hook 'dired-after-readin-hook
	  (lambda ()
	    (dired-omit-mode)
	    (dired-hide-details-mode)))
#+end_src

*** peep-dired

#+begin_src emacs-lisp
(use-package peep-dired)
#+end_src

*** disk-usage

#+begin_src emacs-lisp
(use-package disk-usage)
#+end_src

*** dired-narrow

#+begin_src emacs-lisp
(use-package dired-narrow
  :config
  (define-key dired-mode-map (kbd "K") 'dired-narrow))
#+end_src

** tab-bar

#+begin_src emacs-lisp
(setq tab-bar-new-tab-choice "*scratch*")
(require 'hydra)
(defhydra hydra-tab-bar (global-map "C-x t")
  ("c" tab-bar-new-tab)
  ("j" tab-bar-switch-to-next-tab)
  ("k" tab-bar-switch-to-prev-tab)
  ("x" tab-bar-close-tab)
  ("o" tab-bar-select-tab-by-name)
  ("r" tab-bar-rename-tab)
  ("1" tab-bar-close-other-tabs)
  ("t" tab-bar-mode))
#+end_src

[[http://ruzkuku.com/texts/emacs-global.html#fn2][emacs28 global modeline]]
#+begin_src emacs-lisp
(setq tab-bar-format
      '(tab-bar-format-history
        tab-bar-format-tabs 
        tab-bar-separator
        tab-bar-format-add-tab
	tab-bar-format-align-right
	tab-bar-format-global))
#+end_src

** editing

*** input method

#+begin_src emacs-lisp
(use-package pyim
  :after posframe
  :config
  (use-package pyim-basedict
    :config (pyim-basedict-enable))
  (setq pyim-default-scheme 'quanpin)
  (setq pyim-page-tooltip 'posframe)
  (setq pyim-page-length 5))

;;;###autoload
(defun arche/toggle-input-method (&optional im)
  (if current-input-method
      (set-input-method nil)
    (set-input-method im)))

;;;###autoload
(defun arche/toggle-cn-im ()
  (interactive)
  (arche/toggle-input-method "pyim"))

;;;###autoload
(defun arche/toggle-TeX-im ()
  (interactive)
  (arche/toggle-input-method "TeX")) 
#+end_src

*** xah-fly-keys                                                    :ARCHIVE:

#+begin_src emacs-lisp
(use-package xah-fly-keys
  :config
  (xah-fly-keys-set-layout "dvorak")
  (xah-fly-keys 1))
#+end_src


*** modal editing with meow

#+begin_src emacs-lisp
(use-package meow
  :init
  (meow-global-mode)
  :config
  (meow-setup-line-number)
  (setq meow-expand-hint-remove-delay 2.0)
  
  ;; fallback commands:
  ;; the cdr's are called when there's no available selection
  (setq meow-selection-command-fallback
	'((meow-replace . meow-replace-char)
	  (meow-change . meow-change-char)
	  (meow-save . meow-save-char)
	  (meow-kill . meow-C-k)
	  (meow-delete . meow-C-d)
	  (meow-cancel-selection . meow-keyboard-quit)
	  (meow-pop . meow-pop-grab)))

  ;; list of default states
  (setq meow-mode-state-list '((cider-browse-spec-view-mode . motion)
			       (bibtex-mode . normal)
			       (fundamental-mode . normal)
			       (occur-edit-mode . normal)
			       (irc-mode . normal)
			       (text-mode . normal)
			       (prog-mode . normal)
			       (conf-mode . normal)
			       (cider-repl-mode . normal)
			       (sly-mrepl-mode . normal)
			       (inferior-haskell-mode . normal)
			       (inferior-python-mode . normal)
			       (maxima-inferior-mode .normal)
			       (haskell-interactive-mode . normal)
			       (geiser-repl-mode . normal)
			       (eshell-mode . normal)
			       (shell-mode . normal)
 			       (eshell-mode . normal)
			       (vterm-mode . normal)
			       (json-mode . normal)
			       (pass-view-mode . normal)
			       (telega-chat-mode . normal)
			       (help-mode . normal)
			       (py-shell-mode . normal)
			       (term-mode . normal)
			       (org-mode . normal)
			       (Custom-mode . normal)))

  (setq meow-replace-state-name-list
	(list (cons 'normal "(=ↀωↀ=)")
	      (cons 'motion "<M>")
	      (cons 'keypad "<K>")
	      ;;(cons 'insert "(^･ｪ･^)")
	      (cons 'insert "(=ⒾωⒾ=)")))

  (set-face-attribute 'meow-normal-indicator nil
		      :foreground (face-attribute 'mode-line :foreground)
		      :background (face-attribute 'default :background))
  (set-face-attribute 'meow-insert-indicator nil
		      :foreground (face-attribute 'default :foreground)
		      :background (face-attribute 'font-lock-constant-face :background))

  (setq meow-expand-hint-remove-delay 2.0)
  
  ;; fallback commands:
  ;; the cdr's are called when there's no available selection
  (setq meow-selection-command-fallback
	'((meow-replace . meow-replace-char)
	  (meow-change . meow-change-char)
	  (meow-save . meow-save-char)
	  (meow-kill . meow-C-k)
	  (meow-delete . meow-C-d)
	  (meow-cancel-selection . meow-keyboard-quit)
	  (meow-pop . meow-pop-grab)))

  (setq meow-replace-state-name-list
	(list
	 (cons 'normal "[N]")
	 (cons 'motion "[M]")
	 (cons 'keypad "[K]")
	 (cons 'insert "[I]")))

  (setq arche/abolished-state-name-list
	(list
	 (cons 'normal "(=ↀωↀ=)")
	 (cons 'normal "(=ↀωↀ=)")))
  
  (set-face-attribute 'meow-normal-indicator nil
		      :foreground (face-attribute 'mode-line :background)
		      :background (face-attribute 'default :foreground))

  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)

  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev))

  (meow-leader-define-key
   '("a" . avy-goto-line)
   '("A" . org-agenda-list)
   '("b" . arche/open-pdf-in-library)
   '("c" . meow-keypad-start)
   '("C" . org-capture)
   '("d" . arche/find-in-home)
   '("e" . arche/toggle-eshell)
   '("f" . org-roam-node-find)
   '("g" . meow-keypad-start)
   '("h" . meow-keypad-start)
   '("i" . meow-last-buffer)
   '("j" . meow-motion-origin-command)
   '("k" . arche/kill-current-buffer)
   '("l" . recenter-top-bottom)
   '("L" . calibredb)
   '("m" . bookmark-jump)
   '("n" . ivy-magit-todos)
   '("o" . switch-to-buffer)
   '("p" . project-find-file)
   '("P" . project-switch-project)
   '("q" . bury-buffer)
   '("r" . revert-buffer)
   '("s" . consult-ripgrep)
   '("S" . (lambda () (interactive) (consult-ripgrep t)))
   '("t" . hydra-tab-bar/body)
   '("Tn" . org-timer-set-timer)
   '("Tk" . org-timer-stop)
   '("u" . tab-bar-switch-to-recent-tab)
   '("v" . arche/toggle-vterm)
   '("w" . save-buffer)
   '("x" . meow-keypad-start)
   '("y" . consult-register)
   '("zt" . arche/toggle-TeX-im)
   '("zc" . calendar)
   '("zg" . golden-ratio)
   '("zo" . olivetti-mode)
   '("zp" . proced)
   '("zr" . rename-buffer)
   '("zw" . bufler-workspace-frame-set)
   '(";f" . org-latex-export-to-pdf)
   '(";h" . org-html-export-to-html)
   '(";d" . org-roam-dailies-goto-today)
   '(";s" . org-latex-preview)
   '(";l" . org-store-link)
   '(";i" . org-roam-node-insert)
   '(";n" . org-narrow-to-subtree)
   '(";r" . org-reload)
   '(";p" . org-set-property)
   '("<return>" . arche/recompile-dwim)
   '("SPC" . meow-motion-origin-command)
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("<tab>" . arche/exwm-recent-workspace)
   '(":" . eval-expression)
   '("/" . meow-search)
   '("!" . shell-command)
   '("?" . meow-cheatsheet))

  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '(";" . comment-line)
   ;; left hand
   '("q" . meow-quit)
   '("w" . ace-window)
   '("W" . delete-other-windows)
   '("e" . meow-append)
   '("r" . meow-reverse)
   '("R" . meow-replace)
   '("t" . avy-goto-end-of-line)
   '("T" . meow-till-expand)
   '("a" . meow-insert)
   '("s" . meow-visit)
   '("f" . avy-goto-char-timer)
   '("F" . meow-find-expand)
   '("d" . meow-kill)
   '("g" . meow-cancel)
   '("z" . meow-pop-selection)
   '("Z" . meow-pop-all-selection)
   '("x" . meow-C-d)
   '("c" . meow-change)
   '("C" . flyspell-correct-wrapper)
   '("v" . kill-ring-save)
   '("b" . execute-extended-command)
   '("B" . meow-left-expand)
   ;; right hand
   '("y" . meow-yank)
   '("Y" . meow-yank-pop)
   '("u" . meow-mark-symbol)
   '("i" . meow-inner-of-thing)
   '("I" . meow-bounds-of-thing)
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '(";" . comment-line)
   '("o" . meow-open-below)
   '("O" . meow-open-above)
   '("p" . meow-block)
   '("P" . meow-block-expand)
   '("B" . meow-left-expand)
   '("h" . meow-back-word)
   '("H" . meow-back-symbol)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("n" . meow-right)
   '("N" . meow-right-expand)
   '("'" . point-to-register)
   '("l" . meow-next-word)
   '("L" . meow-next-symbol)
   '("m" . meow-keypad-start)
   '("M" . point-to-register)
   '("," . meow-line-expand)
   '("." . repeat)
   '("/" . consult-line)
   ;; TODO: o
   '("G" . meow-grab)
   '("&" . meow-query-replace)
   '("%" . meow-query-replace-regexp)
   '("'" . jump-to-register)
   '("`" . pop-global-mark)
   '("\\" . quoted-insert))
  (defun meow--bounds-of-round-parens ()
    (meow--bounds-of-regexp "("))

  (defun arche/meow--bounds-of-org-elem ()
    (let ((elem-prop (cadr (org-element-context))))
      (if elem-prop (cons
		     (plist-get elem-prop :begin)
		     (plist-get elem-prop :end))
	nil)))

  (defun arche/next-line-of-point (point &optional n)
    (save-excursion
      (goto-char point)
      (next-line (if n n 1))
      (point)))

  (defun arche/previous-line-of-point (point &optional n)
    (save-excursion
      (goto-char point)
      (previous-line (if n n 1))
      (point)))

  (defun arche/meow--inner-of-org-elem ()
    (let* ((elem-type (car (org-element-context)))
	   (elem-prop (cadr (org-element-context)))
	   (begin (plist-get elem-prop :begin))
	   (end (plist-get elem-prop :end)))
      (cond
       ((eq elem-type 'src-block) (cons (arche/next-line-of-point begin)
					(arche/previous-line-of-point end 2)))
       ((eq elem-type 'latex-fragment)
	(cons (+ begin 2)
	      (- end 2))))))

  (meow--thing-register 'org-elem
			#'arche/meow--inner-of-org-elem
			#'arche/meow--bounds-of-org-elem)

  (add-to-list 'meow-char-thing-table (cons ?o 'org-elem)))
#+end_src

*** olivetti

#+begin_src emacs-lisp
(use-package olivetti)
#+end_src

*** code folding

#+begin_src emacs-lisp
(use-package outshine)
#+end_src

** version-control

#+begin_src emacs-lisp
(use-package magit)

(use-package magit-todos
  :config
  (magit-todos-mode)
  (global-set-key (kbd "C-x l") #'ivy-magit-todos))
#+end_src

** tramp

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"emacs-tramp"

#+end_src

Add guix system program path:

#+begin_src emacs-lisp
(setq tramp-remote-path
      '("/run/current-system/profile/bin" "/bin" "/usr/bin" "/sbin" "/usr/sbin" "/usr/local/bin" "/usr/local/sbin" "/local/bin" "/local/freeware/bin" "/local/gnu/bin" "/usr/freeware/bin" "/usr/pkg/bin" "/usr/contrib/bin" "/opt/bin" "/opt/sbin" "/opt/local/bin"))
#+end_src

** org

*** guix packages

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"emacs-cdlatex"
"emacs-org-fragtog"

#+end_src

*** emacs packages

#+begin_src emacs-lisp
(use-package org-bullets :after org)
(use-package org-fragtog :after org :straight nil)
(use-package org-web-tools :after org)
(use-package cdlatex
  :straight nil
  :config
  ;; TODO: set cdlatex-command-alist-default
  (setq cdlatex-math-modify-alist
	'((98 "\\mathbb" "\\textbf" t nil nil))))
(use-package valign
  :after org
  :config
  :hook (org-mode . valign-mode))
(use-package org-pdftools
  :after (pdf-tools org)
  :hook (org-mode . org-pdftools-setup-link))
(use-package htmlize)
(use-package org-bars
  :straight (:host github :repo "tonyaldon/org-bars" :branch "master")
  :config
  
  ;; (add-hook 'org-mode-hook 'org-no-ellipsis-in-headlines)
  ;; (remove-hook 'org-mode-hook 'org-bars-mode)
  )

(use-package laas
  :after (avy s)
  :config
  (defun avy-fudu-visible-latex-fragment (&optional strip)
    (interactive)
    (let* ((lfs (org-element-map (org-element-parse-buffer) 'latex-fragment
		  (lambda (lf) (cons (org-element-property :begin lf)
				     (org-element-property :value lf)))))
	   (lfs-visible (->> lfs
			     (-filter (lambda (b-v) (and (< (car b-v) (window-end))
							 (> (car b-v) (window-start)))))))
	   (p (save-excursion (avy-process lfs-visible) (point)))
	   (fragment (cdr (assoc p lfs-visible))))
      (if strip
	  (->> fragment (string-remove-prefix "\\(") (string-remove-suffix "\\)"))
	fragment)
      ))

  (aas-set-snippets 'laas-mode
		    "jj" (lambda () (interactive)
			   (if (not (texmathp))
			       (progn
				 (insert (avy-fudu-visible-latex-fragment (texmathp)))
				 (backward-char 2))
			     (insert (avy-fudu-visible-latex-fragment t))))))

(use-package org-visual-indent
  :disabled
  :after org
  :straight (:host github :repo "legalnonsense/org-visual-outline" :branch "master"))

(use-package org-dynamic-bullets
  :after (org org-visual-indent)
  :straight (:host github :repo "legalnonsense/org-visual-outline" :branch "master")
  :config
  ;; (add-hook 'org-mode-hook 'org-visual-indent-mode)
  ;; (add-hook 'org-mode-hook 'org-dynamic-bullets-mode)
  (defun org-no-ellipsis-in-headlines ()
    "Remove use of ellipsis in headlines. See
`buffer-invisibility-spec'."
    (remove-from-invisibility-spec '(outline . t))
    (add-to-invisibility-spec 'outline))
  (add-hook 'org-mode-hook 'org-no-ellipsis-in-headlines)
  (setq org-visual-indent-color-indent '((1 (:background "blue" :foreground "blue" :height .1))
                                       (2 (:background "red" :foreground "red" :height .1))
                                       (3 (:background "green" :foreground "green" :height .1))))
  )
#+end_src

*** basic setup

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-basic ()
  (setq org-imenu-depth 7)
  (setq system-time-locale "C")
  (setq org-export-with-toc nil)
  (setq org-link-elisp-skip-confirm-regexp (rx (or "man" "wordnut-search"))))
#+end_src

*** display

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-display ()
  (setq org-ellipsis " ▾")
  (setq org-capture-bookmark nil)
  (setq org-image-actual-width nil)
  (setq org-startup-with-latex-preview nil)
  (plist-put org-format-latex-options :scale 3.5)
  (plist-put org-format-latex-options :background "Transparent"))
#+end_src

*** window rules

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-window ()
  (setq org-link-frame-setup
	'((vm . vm-visit-folder-other-frame)
	  (vm-imap . vm-visit-imap-folder-other-frame)
	  (gnus . org-gnus-no-new-news)
	  (file . find-file)
	  (wl . wl-other-frame))))
#+end_src

*** agenda

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-agenda ()
  (setq org-agenda-files (list "~/org/todo.org"
			       "~/org/pomodoro.org"))
  (global-set-key (kbd "C-'") #'org-cycle-agenda-files))
#+end_src

*** capture

#+begin_src emacs-lisp
(setq org-capture-templates
	'(("t" "Personal todo" entry
           (file+headline "todo.org" "Inbox")
           "* TODO %?\n%i" :prepend t)
          ("r" "read later" checkitem
           (file+headline "read-later.org" "Inbox")
           "[ ] %? ")
	  ("b" "Journal" entry (file+datetree "~/org/bits-of-life.org")
              "* %?\nEntered on %U\n  %i\n")
	  ;; TODO capture template for wordnut-buffer
          ("w" "word" plain
	   (file+headline "words.org" "Inbox")
	   "[[elisp:(wordnut-search \"%(org-capture-wordnut-capture)\")][%(org-capture-wordnut-capture)]]")))
#+end_src

*** keybindings

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-keybinding ()
  (general-define-key
   :keymaps 'org-mode-map
   "M-h" #'org-metaleft
   "M-H" #'mark-paragraph
   "M-l" #'org-metaright
   "s-'" #'org-edit-special
   "C-c e" #'org-mark-element)
  (define-key org-src-mode-map (kbd "s-'") #'org-edit-src-exit))
#+end_src

*** refile

#+begin_src emacs-lisp
(defun arche/org-setup-refile ()
  (setq org-refile-targets (list (cons nil (cons :maxlevel 4)))))
#+end_src

*** babel

**** basic setup

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-babel ()
  (setq-default org-hide-block-startup t)
  (setq org-edit-src-content-indentation 0)
  (setq org-src-tab-src-acts-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'current-window)
  ;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append))
#+end_src

**** ob-async

#+begin_src emacs-lisp
(use-package ob-async)
#+end_src

**** src block tools

***** integration with avy

#+begin_src emacs-lisp
(require 'avy)
(require 'hydra)

(defun arche/avy-jump-to-visible-block ()
  (interactive)
  (avy-jump "#\\+BEGIN_SRC" :window-flip nil :beg (window-start) :end (window-end)))

(defun arche/avy-execute-visible-block ()
  (interactive)
  (org-mark-ring-push)
  (avy-jump "#\\+BEGIN_SRC" :window-flip nil :beg (window-start) :end (window-end))
  (org-babel-execute-src-block))

(defun scimax-ob-execute-and-next-block (&optional new)
  "Execute this block and either jump to the next block with the
same language, or add a new one.
With prefix arg NEW, always insert new cell."
  (interactive "P")
  (org-babel-execute-src-block)
  ;; we ignore-errors here because when there is no next block it is a
  ;; user-error, not nil.
  (let* ((lang (car (org-babel-get-src-block-info t)))
	 (next-block (ignore-errors
		       (save-excursion
			 (catch 'block
			   (while (setq next-block (org-babel-next-src-block))
			     (when (string= lang (org-element-property :language (org-element-context)))
			       (throw 'block next-block))))))))
    (if (or new (not next-block))
	(scimax-ob-insert-src-block t)
      (goto-char (match-beginning 0)))))

(defun org-babel-execute-to-point ()
  "Execute all the blocks up to and including the one point is on."
  (interactive)
  (let ((p (point)))
    (save-excursion
      (goto-char (point-min))
      (while (and (org-babel-next-src-block) (< (point) p))
	(org-babel-execute-src-block)))))

(defhydra hydra-org-block-menu (org-mode-map "C-x C-b"
					     :color pink
					     :hint nil)
  "
^Navigate^    ^Execution^
_a_: jump     _RET_: execute
_j_: next     _n_: execute current block and go to next block
_k_: previous _t_: execute all blocks till the current one
"
  ("a" arche/avy-jump-to-visible-block)
  ("j" org-next-block)
  ("k" org-previous-block)
  ("<return>" org-babel-execute-src-block :color blue)
  ("n" scimax-ob-execute-and-next-block :color blue)
  ("t" org-babel-execute-to-point :color blue)
  )
#+end_src

*** noter

#+begin_src emacs-lisp
(use-package org-noter
  :config
  (setq org-noter-notes-search-path
	(list "~/library/notes/")))
#+end_src

*** latex editing within org-mode

#+begin_src emacs-lisp
(defun arche/org-setup-latex-editing ()
  (setq org-pretty-entities t)
  (setq org-pretty-entities-include-sub-superscripts nil)
  (setq TeX-electric-sub-and-superscript t)
  (setq org-use-sub-superscripts '{})
  (setq org-highlight-latex-and-related '(latex script entities))
  ;; (set-face-attribute 'font-latex-math-face nil :background (face-attribute 'default :background))
  )

#+end_src

*** oc and latex export

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup-cite ()
 (let
     ((my-global-bibtex-files (list (file-truename "~/library/hcimu.bib"))))
    (require 'oc)
    (require 'oc-basic)
    ;; for oc.el
    (setq org-cite-global-bibliography my-global-bibtex-files)
    ;; for bibtex.el
    (setq bibtex-files my-global-bibtex-files)
    ))
#+end_src

In order to support citation in (latex->pdf) process:

#+begin_src emacs-lisp
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"bibtex %b"
	"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

LaTeX export for code blocks:

#+begin_src emacs-lisp
(setq org-latex-listings 'minted)
#+end_src

*** abbrev

#+begin_src emacs-lisp
(define-abbrev-table 'org-mode-abbrev-table
  '(("jj" "\\because")
    ("kk" "\\therefore")))
#+end_src


#+end_src

*** hook

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-mode-hook ()
  ;; (org-indent-mode t)
  (laas-mode)
  (org-cdlatex-mode)
  (org-fragtog-mode)
  (visual-line-mode t)
  (abbrev-mode t)
  ;; (if (one-window-p) (olivetti-mode t))
  )
#+end_src

*** roam

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"emacs-org-roam"

#+end_src

#+begin_src emacs-lisp
  (use-package org-roam
    :straight nil
    :after org
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename "~/org-roam/"))
    (org-roam-db-location (file-truename "~/tmp/org-roam.db"))
    :config
    (org-roam-setup))

  (use-package org-roam-ui
    :straight (:host github
		     :repo "org-roam/org-roam-ui"
		     :branch "main"
		     :files ("*.el" "out"))
    :after (org-roam)
    :config
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t))
#+end_src

*** finishing setup

#+begin_src emacs-lisp
;;;###autoload
(defun arche/org-setup ()
  (arche/org-setup-basic)
  (arche/org-setup-latex-editing)
  (arche/org-setup-display)
  (arche/org-setup-window)
  (arche/org-setup-agenda)
  (arche/org-setup-keybinding)
  (arche/org-setup-refile)
  (arche/org-setup-babel)
  (arche/org-setup-cite)
  (add-hook 'org-mode-hook #'arche/org-mode-hook))

(use-package org
  :after (olivetti)
  :config
  (org-reload)
  (arche/org-setup))
#+end_src

*** org-mode center equation

#+begin_src emacs-lisp
;; specify the justification you want
(plist-put org-format-latex-options :justify 'center)

(defun org-justify-fragment-overlay (beg end image &optional imagetype)
  "Adjust the justification of a LaTeX fragment.
The justification is set by :justify in
`org-format-latex-options'. Only equations at the beginning of a
line are justified."
  (cond
   ;; Centered justification
   ((and (eq 'center (plist-get org-format-latex-options :justify)) 
         (= beg (line-beginning-position)))
    (let* ((img (create-image image 'imagemagick t))
           (width (car (image-size img)))
           (offset (floor (- (/ (window-text-width) 2) (/ width 2)))))
      (overlay-put (ov-at) 'before-string (make-string offset ? ))))
   ;; Right justification
   ((and (eq 'right (plist-get org-format-latex-options :justify)) 
         (= beg (line-beginning-position)))
    (let* ((img (create-image image 'imagemagick t))
           (width (car (image-display-size (overlay-get (ov-at) 'display))))
           (offset (floor (- (window-text-width) width (- (line-end-position) end)))))
      (overlay-put (ov-at) 'before-string (make-string offset ? ))))))

(defun org-latex-fragment-tooltip (beg end image &optional imagetype)
  "Add the fragment tooltip to the overlay and set click function to toggle it."
  (overlay-put (ov-at) 'help-echo
               (concat (buffer-substring beg end)
                       "mouse-1 to toggle."))
  (overlay-put (ov-at) 'local-map (let ((map (make-sparse-keymap)))
                                    (define-key map [mouse-1]
                                      `(lambda ()
                                         (interactive)
                                         (org-remove-latex-fragment-image-overlays ,beg ,end)))
                                    map)))

;; advise the function to a
(advice-add 'org--make-preview-overlay :after 'org-justify-fragment-overlay)
(advice-add 'org--make-preview-overlay :after 'org-latex-fragment-tooltip)
;; That is it. If you get tired of the advice, remove it like this:
;; (advice-remove 'org--format-latex-make-overlay 'org-justify-fragment-overlay)
;; (advice-remove 'org--format-latex-make-overlay 'org-latex-fragment-tooltip)
#+end_src

#+RESULTS:


** pass

#+begin_src emacs-lisp
(use-package pass)
#+end_src

** pdf

*** pdf-tools

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"emacs-pdf-tools"

#+end_src

#+begin_src emacs-lisp
(use-package pdf-tools :straight nil
  :config
  (require 'pdf-occur)
  (require 'pdf-annot)
  (require 'pdf-outline)
  (pdf-tools-install)

  (general-define-key
   :keymaps 'pdf-view-mode-map
   ;; tips:
   ;; W to fit width
   ;; H to fit height
   "o" #'pdf-outline
   "/" #'pdf-occur
   "j" #'pdf-view-next-line-or-next-page
   "k" #'pdf-view-previous-line-or-previous-page
   "z" #'pdf-annot-add-highlight-markup-annotation
   "_" #'pdf-annot-add-underline-markup-annotation
   "v" #'image-mode-copy-file-name-as-kill
   "w" #'ace-window
   "la" #'pdf-annot-list-annotations
   "L" #'org-store-link
   "," #'pdf-view-themed-minor-mode)
  
  (general-define-key
   :keymaps 'pdf-outline-buffer-mode
   "m" #'pdf-outline-follow-link)
  
  (defun arche/pdf-hook ()
    (auto-revert-mode 1)
    (blink-cursor-mode -1)
    (display-line-numbers-mode -1))

  (add-hook 'pdf-tools-enabled-hook #'arche/pdf-hook))

;; tips: c: toggle continuous scroll
;; M: toggle display of header line
(use-package pdf-continuous-scroll-mode
  :after pdf-tools
  :straight (:type git
		   :host github
		   :repo "dalanicolai/pdf-continuous-scroll-mode.el"))

(use-package saveplace-pdf-view
  :after pdf-tools
  :init (save-place-mode 1))
#+end_src

*** browse library

#+begin_src emacs-lisp
(defvar my-global-bibtex-file "~/library/hcimu.bib")
(defvar my-global-bibtex-pdf-dir "~/library/pdf")

(defun arche/bib-keys ()
  (with-current-buffer (find-file-noselect my-global-bibtex-file)
    (mapcar 'car
	    (-filter 'cdr
		     (bibtex-parse-keys)))))

(arche/bib-keys)

(defun arche/key->title (key)
  (with-current-buffer (find-file-noselect my-global-bibtex-file)
    (goto-char (bibtex-find-entry key t))
    (bibtex-autokey-get-field "title")))

(defun arche/key->author (key)
  (with-current-buffer (find-file-noselect my-global-bibtex-file)
    (goto-char (bibtex-find-entry key t))
    (bibtex-autokey-get-field "author")))

(defun arche/key->pdf-file (key)
  (let*
      ((pdf-files (f-files (file-name-as-directory my-global-bibtex-pdf-dir)))
       (file-matched
	(-first (lambda (f)
		  (string-equal key
				(f-base f)))
		pdf-files)))
    file-matched))

;; TODO: display author and additional info with marginalia
;; https://github.com/minad/marginalia
(defun arche/open-pdf-in-library (&optional arg)
  (interactive "P")
  (let*
      ((collection (mapcar (lambda (key) (list (concat (arche/key->title key) " | " (arche/key->author key)) key)) (arche/bib-keys)))
       (title-and-author (completing-read "select book:" collection))
       (key (cadr (assoc title-and-author collection)))
       (pdf-file (arche/key->pdf-file key)))
    (if pdf-file
	(if arg
	    (let ((command (concat "mupdf-x11" " " pdf-file)))
	      (start-process-shell-command command nil command))
	  (find-file pdf-file))
	(message "book not found :)")))) 

#+end_src

** calibre

https://github.com/chenyanming/calibredb.el

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"calibre"
"emacs-calibredb"

#+end_src

#+begin_src emacs-lisp
(use-package calibredb
  :straight nil
  :config
  (setq calibredb-db-dir "~/calibre/metadata.db")
  (setq calibredb-root-dir "~/calibre")
  (setq calibredb-format-all-the-icons t))
#+end_src

*** TODO integration with org-cite

*** epub

#+begin_src emacs-lisp
(use-package nov
  :config
  ;; tip: never use toc (t), use imenu instead!
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  :hook
  (nov-mode . variable-pitch-mode))
#+end_src

#+RESULTS:
| variable-pitch-mode |

** http-proxy

#+begin_src emacs-lisp
;;;###autoload
(defun arche/toggle-http-proxy ()
  (interactive)
  (let ((p "http://127.0.0.1:7890"))
    (if (getenv "http_proxy")
	(progn
	  (setenv "http_proxy" nil)
	  (setenv "https_proxy" nil))
      (progn
	(setenv "http_proxy" p)
	(setenv "https_proxy" p)))))
#+end_src

** telega
:LOGBOOK:
CLOCK: [2021-09-30 Thu 04:38]--[2021-09-30 Thu 04:41] =>  0:03
:END:

#+begin_src scheme :noweb-ref guix-packages :noweb-sep ""

"font-gnu-unifont"
"font-gnu-freefont"
"emacs-telega-server"
"emacs-telega-contrib"

#+end_src

~cl--plist-remove~ is a deprecated function and removed in telega source recently (#303).

#+begin_src emacs-lisp :tangle no
(defun cl--plist-remove (plist member)
  (cond
   ((null plist) nil)
   ((null member) plist)
   ((eq plist member) (cddr plist))
   (t `(,(car plist) ,(cadr plist) ,@(cl--plist-remove (cddr plist) member)))))
#+end_src

#+begin_src emacs-lisp
;;;###autoload
(defun arche/telega-mode-hook ()
  (setq line-spacing 0)
  (setq olivetti-body-width 100)
  (if (one-window-p) (olivetti-mode t)))

(use-package telega
  :after (olivetti)
  :init (fset 'cl--plist-remove 'map--plist-delete)
  :straight nil
  :config
  (setq telega-emoji-font-family "EmojiOne")
  (setq telega-emoji-use-images "EmojiOne") 
  ;; (setq telega-proxies
  ;; 	'((:server "127.0.0.1"
  ;; 		   :port 7890
  ;; 		   :enable t
  ;; 		   :type (:@type "proxyTypeHttp")
  ;; 		   )))
  (setq telega-proxies nil) 
  (add-hook 'telega-chat-mode-hook #'timeclock-query-out)
  (add-hook 'timeclock-in-hook #'(lambda () (telega-kill t)))
  (define-key dired-mode-map (kbd "H-s") #'telega-buffer-file-send)
  (add-hook 'telega-chat-mode-hook #'arche/telega-mode-hook)
  (add-hook 'telega-root-mode-hook #'arche/telega-mode-hook))
#+end_src

** docker

#+begin_src emacs-lisp
(use-package docker)
#+end_src

** ledger

#+begin_src emacs-lisp
(use-package ledger-mode
  :straight nil)
#+end_src

** cas

*** maxima

#+begin_src emacs-lisp
(use-package maxima)

;;;###autoload
(defun arche/maxima-inferior-mode-hook ()
  (meow-normal-mode t)
  (electric-pair-mode t))

(add-hook 'maxima-inferior-mode-hook #'arche/maxima-inferior-mode-hook)
(add-to-list 'org-babel-load-languages (cons 'maxima t))
#+end_src

#+RESULTS:
| arche/maxima-inferior-mode-hook |

*** latex

Is it a programming language?

#+begin_src emacs-lisp
(add-to-list 'org-babel-load-languages (cons 'latex t))
#+end_src

** programming

*** builtin project.el

Ignore emacs backup files.

#+begin_src emacs-lisp
(setq-default project-vc-ignores (list "*~"))
#+end_src


*** diff-mode

#+begin_src emacs-lisp
(define-key diff-mode-map (kbd "w") #'ace-window)
#+end_src

*** compilation-mode

Reuse existing compilation-mode window.

#+begin_src emacs-lisp
(defun arche/recompile-dwim ()
  (interactive)
  (let
      ((cur (selected-window))
       (w (get-buffer-window "*compilation*" t)))
    (if (derived-mode-p 'prog-mode) (save-buffer))
    (select-window w)
    (recompile)
    (select-window cur)))

(define-key compilation-mode-map (kbd "w") #'ace-window)
#+end_src

#+RESULTS:
: arche/recompile-dwim

*** lsp

#+begin_src emacs-lisp
  (use-package lsp-mode
    :config
    (setq lsp-headerline-breadcrumb-enable nil))
  
  (use-package lsp-ui
    :config
    (define-key lsp-ui-imenu-mode-map (kbd "w") #'ace-window))
#+end_src
#+RESULTS:

** languages

*** shell

#+begin_src emacs-lisp
(add-to-list 'org-babel-load-languages (cons 'shell t))
#+end_src

*** c

#+begin_src emacs-lisp
(add-to-list 'org-babel-load-languages (cons 'C t))
#+end_src

*** haskell

#+begin_src emacs-lisp
(use-package haskell-mode
  :config
  (define-key haskell-mode-map (kbd "C-c C-c") #'haskell-process-load-file))
(add-to-list 'org-babel-load-languages (cons 'haskell t))
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-babel-load-languages (cons 'haskell t))
#+end_src


*** lisp

**** scheme

#+begin_src emacs-lisp
(add-to-list 'org-babel-load-languages (cons 'scheme t))
#+end_src

***** TODO guile

#+begin_src emacs-lisp
(use-package geiser-guile)
(add-hook 'scheme-mode-hook #'lispy-mode)
#+end_src

flycheck support
https://github.com/flatwhatson/flycheck-guile

**** common lisp

#+begin_src emacs-lisp
(use-package sly)
(add-hook 'lisp-mode-hook 'lispy-mode)
;(use-package slime)
(setq org-babel-lisp-eval-fn #'sly-eval)
(add-to-list 'org-babel-load-languages (cons 'lisp t))
#+end_src

*** yaml

#+begin_src emacs-lisp
(use-package yaml-mode)
;; (add-to-list 'org-babel-load-languages (cons 'yaml t))
#+end_src

*** python

**** TODO: babel python src blocks do not work

#+begin_src emacs-lisp
(setq org-babel-python-command "python3")
(add-to-list 'org-babel-load-languages (cons 'python t))
#+end_src

**** elpy

Useful features:
- elpy-shell-send-codecell
- elpy-doc

#+begin_src emacs-lisp
(use-package elpy
  :config (elpy-enable))
#+end_src

**** toggle inferior python window (requires [[*pop up]])

#+begin_src emacs-lisp
;;;###autoload
(defun arche/raise-inferior-python ()
  (interactive)
  (arche/switch-to-first-by-major-mode 'inferior-python-mode))

;;;###autoload
(defun arche/toggle-python ()
  (interactive)
  (arche/toggle-window-with-major-mode 'inferior-python-mode #'arche/raise-inferior-python))

(global-set-key (kbd "C-c p") #'arche/toggle-python)
#+end_src

*** gap

Gap is a computer algebra system.

#+begin_src emacs-lisp
(use-package gap-mode
  :config
  (setq gap-executable "~/.guix-profile/bin/gap")
  (setq gap-start-options '("-f" "-b" "-m" "2m" "-E")))
#+end_src


** backup config

#+begin_src emacs-lisp
(setq backup-directory-alist (list (cons ""
					 (concat user-emacs-directory "backup/"))))
#+end_src

#+RESULTS:
: (( . ~/.config/emacs-experiment/backup/))

** flyspell-correct

#+begin_src emacs-lisp
(use-package flyspell-correct)
(use-package flyspell-correct-avy-menu
  :after flyspell-correct
  :config
  (add-hook 'org-mode-hook #'flyspell-mode)) 
#+end_src

#+RESULTS:
: t

** ffip

#+begin_src emacs-lisp
(use-package find-file-in-project
  :config (setq ffip-use-rust-fd t))
#+end_src

#+RESULTS:
: t
** smartparens

#+begin_src emacs-lisp
(use-package smartparens
  :config
  (require 'smartparens-config)
  (smartparens-global-mode t))
#+end_src

#+RESULTS:
: t

TODO: learn from [[https://github.com/expez/evil-smartparens][evil-smartparens]] and integrate with meow.

** helpful

#+begin_src emacs-lisp
(use-package helpful
  :config
  (global-set-key (kbd "C-h C-f") #'helpful-callable)
  (global-set-key (kbd "C-h C-v") #'helpful-variable)
  (global-set-key (kbd "C-h C-s") #'helpful-symbol))
#+end_src

#+RESULTS:
: t


** startup speed optimization(tail)

#+begin_src emacs-lisp
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1
      ;; file-name-handler-alist arche/file-name-handler-alist
      )
#+end_src

* experimental

** eva

#+begin_src emacs-lisp
(use-package eva
  :straight (eva :type git :host github :repo "meedstrom/eva"))
#+end_src

** org-ref-cite

#+begin_src emacs-lisp
(use-package ivy-bibtex
  :init
  (setq bibtex-completion-bibliography '("~/library/hcimu.bib")
	bibtex-completion-notes-path "~/library/notes/"
	bibtex-completion-notes-template-multiple-files "#+TITLE: Notes on: ${author-or-editor} (${year}): ${title}\n\nSee [cite/t:@${=key=}]\n"
	bibtex-completion-library-path '("~/library/pdf/")
	bibtex-completion-additional-search-fields '(keywords)
	bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))))

(use-package citeproc)
(use-package citeproc)
(use-package org-ref)
(use-package org-ref-cite
  :straight (:host github :repo "jkitchin/org-ref-cite" :branch "main")
  :config
  ;; I like green links
  (set-face-attribute 'org-cite nil :foreground "DarkSeaGreen4")
  (set-face-attribute 'org-cite-key nil :foreground "forest green")
  (setq
   org-cite-global-bibliography bibtex-completion-bibliography
   ;; https://github.com/citation-style-language/styles
   ;; or https://www.zotero.org/styles
   org-cite-csl-styles-dir "/Users/jkitchin/Dropbox/emacs/scimax/org-ref-cite/csl-styles"
   org-cite-insert-processor 'org-ref-cite
   org-cite-follow-processor 'org-ref-cite
   org-cite-activate-processor 'org-ref-cite
   org-cite-export-processors '((html csl "elsevier-with-titles.csl")
			        (latex org-ref-cite)
			        (t basic))))
(setq bibtex-completion-pdf-field "file")
(setq org-ref-get-pdf-filename-function #'org-ref-get-pdf-filename-helm-bibtex
	  org-ref-open-pdf-function #'org-ref-open-pdf-at-point)
#+end_src

cite:book:2387878

** hyperbole

#+begin_src emacs-lisp
(use-package hyperbole)
#+end_src

#+RESULTS:

** bibtex-actions

 #+begin_src emacs-lisp
(use-package bibtex-completion)
(use-package citeproc)
(defvar my/bibs '("~/library/hcimu.bib"))

(use-package oc-bibtex-actions
  :straight (:host github
		   :repo "bdarcus/bibtex-actions"
		   :branch "main")
  :bind (("C-c b" . org-cite-insert))
  :after (embark org bibtex-completion citeproc)
  :config
  (define-key minibuffer-local-map (kbd "M-b") #'bibtex-actions-insert-preset)
  (setq bibtex-actions-bibliography my/bibs)
  (setq bibtex-actions-bibliography my/bibs
        org-cite-global-bibliography my/bibs
        org-cite-insert-processor 'oc-bibtex-actions
        org-cite-follow-processor 'oc-bibtex-actions
        org-cite-activate-processor 'basic)
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
  (setq bibtex-actions-at-point-function 'embark-act)
  ;; Make the 'bibtex-actions' bindings and targets available to `embark'.
  (add-to-list 'embark-target-finders 'bibtex-actions-citation-key-at-point)
  (add-to-list 'embark-keymap-alist '(bib-reference . bibtex-actions-map))
  (add-to-list 'embark-keymap-alist '(citation-key . bibtex-actions-buffer-map))
  (setq bibtex-actions-at-point-function 'embark-act))

(require 'bibtex-actions-file)
(require 'oc-bibtex-actions)
#+end_src

#+RESULTS:
: oc-bibtex-actions

[cite:@book:1309822]

** org contrib with straight?

#+begin_src emacs-lisp
(use-package org-contrib)
#+end_src

#+RESULTS:

** insert random string

http://ergoemacs.org/emacs/elisp_insert_random_number_string.html

#+begin_src emacs-lisp
(defun xah-insert-random-number (NUM)
  "Insert NUM random digits.
NUM default to 5.
Call `universal-argument' before for different count.
URL `http://ergoemacs.org/emacs/elisp_insert_random_number_string.html'
Version 2017-05-24"
  (interactive "P")
  (let (($charset "1234567890" )
        ($baseCount 10))
    (dotimes (_ (if (numberp NUM) (abs NUM) 5 ))
      (insert (elt $charset (random $baseCount))))))
#+end_src

#+RESULTS:
: xah-insert-random-number

** supersave

#+begin_src emacs-lisp
(use-package super-save
  :custom
  (super-save-exclude (list "\\.pdf$"
			    "\\.epub$"))
  :config
  (super-save-mode +1))
#+end_src

#+RESULTS:
: t

** tab

#+begin_src emacs-lisp
(global-set-key (kbd "M-j") #'tab-to-tab-stop)
(setq-default indent-tabs-mode nil)
#+end_src

#+RESULTS:

** toc-org

#+begin_src emacs-lisp
(use-package toc-org)
#+end_src

#+RESULTS:

** ob-async

#+begin_src emacs-lisp
(use-package ob-async)
#+end_src

#+RESULTS:

** map hard keys

#+begin_src emacs-lisp
(global-set-key (kbd "H-r") "`")
(global-set-key (kbd "H-t") "~")
(global-set-key (kbd "H-f") "\\")
#+end_src

#+RESULTS:
: \

** plz

#+begin_src emacs-lisp
(use-package plz
  :straight (:type git :host github :repo "alphapapa/plz.el"))
#+end_src

#+RESULTS:

** visual-regexp

#+begin_src emacs-lisp
(use-package visual-regexp)
#+end_src

#+RESULTS:

** eval subtree in org-mode

#+begin_src emacs-lisp
(defun eval-subtree ()
  "Evaluate all emacs-lisp blocks in the subtree"
  (interactive)
  (progn
    (call-interactively #'consult-imenu)
    (org-narrow-to-subtree)
      (while (org-next-block 1)
	(if (string-equal "emacs-lisp" (plist-get (cadr (org-element-at-point)) :language))
	    (org-ctrl-c-ctrl-c)))
      (widen)))
#+end_src

#+RESULTS:
: eval-subtree

** share pass with kdeconnect

#+begin_src emacs-lisp
(let
    ((device (completing-read "Select device: "
			      (->> (shell-command-to-string "kdeconnect-cli -l")
				   (s-split "\n" )
				   (-filter (lambda (s) (s-prefix-p "-" s)))
				   (mapcar (lambda (line) (cadr (s-split " " line))))
				   (mapcar (lambda (s) (s-chop-suffix ":" s)))))))
  (async-shell-command
   (concat "kdeconnect-cli -n " device " --share-text \"" (read-string (concat "Send text to " device ": ")) "\"")))
#+end_src

** dos2unix

#+begin_src emacs-lisp
(defun dos2unix (buffer)
  "Automate M-% C-q C-m RET C-q C-j RET"
  (interactive "*b")
  (save-excursion
    (goto-char (point-min))
    (while (search-forward (string ?\C-m) nil t)
      (replace-match (string ?\C-j) nil t))))
#+end_src

#+RESULTS:
: dos2unix

** asy

#+begin_src emacs-lisp
(add-to-list 'org-babel-load-languages (cons 'asymptote t))
#+end_src

#+RESULTS:
: ((asymptote . t) (python . t) (scheme . t) (haskell . t) (C . t) (shell . t) (latex . t) (maxima . t) (emacs-lisp . t))

** simple-httpd

#+begin_src emacs-lisp
(use-package simple-httpd)
#+end_src

#+RESULTS:

** latex preview image backend

#+begin_src emacs-lisp
(setq org-latex-create-formula-image-program 'dvipng)
#+end_src

#+RESULTS:
: dvipng

** org-mode export tikz

#+begin_src emacs-lisp
(defvar is-latex (org-export-derived-backend-p org-export-current-backend 'latex))
#+end_src

#+RESULTS:
: is-latex

** dogears

#+begin_src emacs-lisp
(use-package dogears
  :straight (:host github :repo "alphapapa/dogears.el" :branch "master")
  :init (dogears-mode))
#+end_src

** prism

#+begin_src emacs-lisp
(use-package prism)
#+end_src

#+RESULTS:

** casease

#+begin_src emacs-lisp
(use-package casease
  :straight (:host github :repo "DogLooksGood/casease" :branch "master"))
#+end_src

#+RESULTS:

** el-easydraw

#+begin_src emacs-lisp
(use-package el-easydraw
  :straight
  (:host github
	 :branch "master"
	 :repo "misohena/el-easydraw")
  :config
  (setq edraw-org-link-export-data-tag 'img))
#+end_src

#+RESULTS:
: t


** inkscape integration

#+begin_src emacs-lisp
(straight-use-package '(ink :type git :host github :repo "foxfriday/ink"))
#+end_src

#+RESULTS:
: t

** lorem-ipsum

#+begin_src emacs-lisp
(use-package lorem-ipsum)
#+end_src

#+RESULTS:

** krita integration

#+begin_src emacs-lisp
(use-package org-krita
  :straight (:host github :repo "lepisma/org-krita" :files ("*.el" "resources"))
  :config
  (add-hook 'org-mode-hook 'org-krita-mode))
#+end_src

#+RESULTS:
: t

** org latex code block export

#+begin_src emacs-lisp
(setq org-latex-listings 'minted)
#+end_src

#+RESULTS:
: minted

** boxy

#+begin_src emacs-lisp
(use-package boxy
  :straight (:host gitlab :repo "tygrdev/boxy" :branch "main"))

(use-package boxy-headings
  :straight (:host gitlab :repo "tygrdev/boxy-headings" :branch "main"))

(use-package boxy-imenu
  :straight (:host gitlab :repo "tygrdev/boxy-imenu" :branch "main"))

(use-package org-real
  :straight (:host gitlab :repo "tygrdev/org-real" :branch "main"))
#+end_src

#+RESULTS:

** orglink

#+begin_src emacs-lisp
(use-package orglink
  :config (global-orglink-mode))
#+end_src

#+RESULTS:

** xenops

#+begin_src emacs-lisp
(use-package xenops
  :straight (:host github :repo "dandavison/xenops" :branch "master"))

(add-to-list 'texmathp-environments "tikzcd")
#+end_src

#+RESULTS:
| tikzcd | equation | eqnarray | eqnarray* | math | displaymath | minipage | equation* | align | align* | gather | gather* | multline | multline* | flalign | flalign* | alignat | alignat* | xalignat | xalignat* | xxalignat | empheq | AmSequation | AmSequation* | AmSalign | AmSalign* | AmSgather | AmSgather* | AmSmultline | AmSmultline* | AmSflalign | AmSflalign* | AmSalignat | AmSalignat* | dmath | dmath* | dseries | dseries* | dgroup | dgroup* | darray | darray* | dsuspend |

** org-sidebar

#+begin_src emacs-lisp
(use-packge org-sidebar)
#+end_src

#+RESULTS:

** screenshot

#+begin_src emacs-lisp
(use-package screenshot)
#+end_src

** ox-chameleon

#+begin_src emacs-lisp
(use-package engrave-faces
  :straight (:host github :repo "tecosaur/engrave-faces" :branch "master"))
(use-package ox-chameleon
  :after engrave-faces
  :straight (:host github :repo "tecosaur/ox-chameleon" :branch "master"))
#+end_src

#+RESULTS:

** calctex

#+begin_src emacs-lisp
(use-package calctex
  :straight (:host github :repo "johnbcoughlin/calctex"
                   :files ("*.el" "calctex/*.el" "calctex-contrib/*.el" "org-calctex/*.el" "vendor")))
#+end_src

#+RESULTS:



#+RESULTS:
| native | script | entities |

